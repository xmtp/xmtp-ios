// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
	struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
	typealias Version = _2
}

public struct Notifications_V1_DeliveryMechanism {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var deliveryMechanismType: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType?

	public var apnsDeviceToken: String {
		get {
			if case let .apnsDeviceToken(v)? = deliveryMechanismType { return v }
			return String()
		}
		set { deliveryMechanismType = .apnsDeviceToken(newValue) }
	}

	public var firebaseDeviceToken: String {
		get {
			if case let .firebaseDeviceToken(v)? = deliveryMechanismType { return v }
			return String()
		}
		set { deliveryMechanismType = .firebaseDeviceToken(newValue) }
	}

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public enum OneOf_DeliveryMechanismType: Equatable {
		case apnsDeviceToken(String)
		case firebaseDeviceToken(String)

		#if !swift(>=4.1)
			public static func == (lhs: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType, rhs: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType) -> Bool {
				// The use of inline closures is to circumvent an issue where the compiler
				// allocates stack space for every case branch when no optimizations are
				// enabled. https://github.com/apple/swift-protobuf/issues/1034
				switch (lhs, rhs) {
				case (.apnsDeviceToken, .apnsDeviceToken): return {
						guard case let .apnsDeviceToken(l) = lhs, case let .apnsDeviceToken(r) = rhs else { preconditionFailure() }
						return l == r
					}()
				case (.firebaseDeviceToken, .firebaseDeviceToken): return {
						guard case let .firebaseDeviceToken(l) = lhs, case let .firebaseDeviceToken(r) = rhs else { preconditionFailure() }
						return l == r
					}()
				default: return false
				}
			}
		#endif
	}

	public init() {}
}

public struct Notifications_V1_RegisterInstallationRequest {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var installationID: String = .init()

	public var deliveryMechanism: Notifications_V1_DeliveryMechanism {
		get { return _deliveryMechanism ?? Notifications_V1_DeliveryMechanism() }
		set { _deliveryMechanism = newValue }
	}

	/// Returns true if `deliveryMechanism` has been explicitly set.
	public var hasDeliveryMechanism: Bool { return _deliveryMechanism != nil }
	/// Clears the value of `deliveryMechanism`. Subsequent reads from it will return its default value.
	public mutating func clearDeliveryMechanism() { _deliveryMechanism = nil }

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}

	fileprivate var _deliveryMechanism: Notifications_V1_DeliveryMechanism?
}

public struct Notifications_V1_RegisterInstallationResponse {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var installationID: String = .init()

	public var validUntil: UInt64 = 0

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}
}

public struct Notifications_V1_DeleteInstallationRequest {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var installationID: String = .init()

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}
}

public struct Notifications_V1_SubscribeRequest {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var installationID: String = .init()

	public var topics: [String] = []

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}
}

public struct Notifications_V1_UnsubscribeRequest {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var installationID: String = .init()

	public var topics: [String] = []

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
	extension Notifications_V1_DeliveryMechanism: @unchecked Sendable {}
	extension Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType: @unchecked Sendable {}
	extension Notifications_V1_RegisterInstallationRequest: @unchecked Sendable {}
	extension Notifications_V1_RegisterInstallationResponse: @unchecked Sendable {}
	extension Notifications_V1_DeleteInstallationRequest: @unchecked Sendable {}
	extension Notifications_V1_SubscribeRequest: @unchecked Sendable {}
	extension Notifications_V1_UnsubscribeRequest: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "notifications.v1"

extension Notifications_V1_DeliveryMechanism: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".DeliveryMechanism"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "apns_device_token"),
		2: .standard(proto: "firebase_device_token"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try {
					var v: String?
					try decoder.decodeSingularStringField(value: &v)
					if let v = v {
						if self.deliveryMechanismType != nil { try decoder.handleConflictingOneOf() }
						self.deliveryMechanismType = .apnsDeviceToken(v)
					}
				}()
			case 2: try {
					var v: String?
					try decoder.decodeSingularStringField(value: &v)
					if let v = v {
						if self.deliveryMechanismType != nil { try decoder.handleConflictingOneOf() }
						self.deliveryMechanismType = .firebaseDeviceToken(v)
					}
				}()
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		// The use of inline closures is to circumvent an issue where the compiler
		// allocates stack space for every if/case branch local when no optimizations
		// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
		// https://github.com/apple/swift-protobuf/issues/1182
		switch deliveryMechanismType {
		case .apnsDeviceToken?: try {
				guard case let .apnsDeviceToken(v)? = self.deliveryMechanismType else { preconditionFailure() }
				try visitor.visitSingularStringField(value: v, fieldNumber: 1)
			}()
		case .firebaseDeviceToken?: try {
				guard case let .firebaseDeviceToken(v)? = self.deliveryMechanismType else { preconditionFailure() }
				try visitor.visitSingularStringField(value: v, fieldNumber: 2)
			}()
		case nil: break
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_DeliveryMechanism, rhs: Notifications_V1_DeliveryMechanism) -> Bool {
		if lhs.deliveryMechanismType != rhs.deliveryMechanismType { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Notifications_V1_RegisterInstallationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".RegisterInstallationRequest"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "installation_id"),
		2: .standard(proto: "delivery_mechanism"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularStringField(value: &installationID)
			case 2: try try decoder.decodeSingularMessageField(value: &_deliveryMechanism)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		// The use of inline closures is to circumvent an issue where the compiler
		// allocates stack space for every if/case branch local when no optimizations
		// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
		// https://github.com/apple/swift-protobuf/issues/1182
		if !installationID.isEmpty {
			try visitor.visitSingularStringField(value: installationID, fieldNumber: 1)
		}
		try { if let v = self._deliveryMechanism {
			try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
		} }()
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_RegisterInstallationRequest, rhs: Notifications_V1_RegisterInstallationRequest) -> Bool {
		if lhs.installationID != rhs.installationID { return false }
		if lhs._deliveryMechanism != rhs._deliveryMechanism { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Notifications_V1_RegisterInstallationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".RegisterInstallationResponse"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "installation_id"),
		2: .standard(proto: "valid_until"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularStringField(value: &installationID)
			case 2: try try decoder.decodeSingularUInt64Field(value: &validUntil)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		if !installationID.isEmpty {
			try visitor.visitSingularStringField(value: installationID, fieldNumber: 1)
		}
		if validUntil != 0 {
			try visitor.visitSingularUInt64Field(value: validUntil, fieldNumber: 2)
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_RegisterInstallationResponse, rhs: Notifications_V1_RegisterInstallationResponse) -> Bool {
		if lhs.installationID != rhs.installationID { return false }
		if lhs.validUntil != rhs.validUntil { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Notifications_V1_DeleteInstallationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".DeleteInstallationRequest"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "installation_id"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularStringField(value: &installationID)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		if !installationID.isEmpty {
			try visitor.visitSingularStringField(value: installationID, fieldNumber: 1)
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_DeleteInstallationRequest, rhs: Notifications_V1_DeleteInstallationRequest) -> Bool {
		if lhs.installationID != rhs.installationID { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Notifications_V1_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "installation_id"),
		2: .same(proto: "topics"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularStringField(value: &installationID)
			case 2: try try decoder.decodeRepeatedStringField(value: &topics)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		if !installationID.isEmpty {
			try visitor.visitSingularStringField(value: installationID, fieldNumber: 1)
		}
		if !topics.isEmpty {
			try visitor.visitRepeatedStringField(value: topics, fieldNumber: 2)
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_SubscribeRequest, rhs: Notifications_V1_SubscribeRequest) -> Bool {
		if lhs.installationID != rhs.installationID { return false }
		if lhs.topics != rhs.topics { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Notifications_V1_UnsubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".UnsubscribeRequest"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "installation_id"),
		2: .same(proto: "topics"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularStringField(value: &installationID)
			case 2: try try decoder.decodeRepeatedStringField(value: &topics)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		if !installationID.isEmpty {
			try visitor.visitSingularStringField(value: installationID, fieldNumber: 1)
		}
		if !topics.isEmpty {
			try visitor.visitRepeatedStringField(value: topics, fieldNumber: 2)
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Notifications_V1_UnsubscribeRequest, rhs: Notifications_V1_UnsubscribeRequest) -> Bool {
		if lhs.installationID != rhs.installationID { return false }
		if lhs.topics != rhs.topics { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}
