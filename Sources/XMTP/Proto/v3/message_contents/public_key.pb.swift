// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: v3/message_contents/public_key.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Structure for representing public keys of different types,
/// including signatures used to authenticate the keys.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An unsigned public key used by libxmtp
public struct Xmtp_V3_MessageContents_VmacUnsignedPublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var createdNs: UInt64 = 0

  public var union: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.OneOf_Union? = nil

  public var curve25519: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519 {
    get {
      if case .curve25519(let v)? = union {return v}
      return Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519()
    }
    set {union = .curve25519(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Union: Equatable {
    case curve25519(Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.OneOf_Union, rhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.OneOf_Union) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.curve25519, .curve25519): return {
        guard case .curve25519(let l) = lhs, case .curve25519(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// A Vodozemac curve25519 key serialized via serde
  /// (https://github.com/matrix-org/vodozemac/blob/
  /// 929bbaf325686435bdd0ed0d0cc45b0cbad3430d/src/types/curve25519.rs#L100)
  public struct VodozemacCurve25519 {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bytes: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// A key linked to an XMTP account (e.g. signed by a wallet)
/// The purpose of the key is encoded in the signature
public struct Xmtp_V3_MessageContents_VmacAccountLinkedKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: Xmtp_V3_MessageContents_VmacUnsignedPublicKey {
    get {return _key ?? Xmtp_V3_MessageContents_VmacUnsignedPublicKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var association: Xmtp_V3_MessageContents_VmacAccountLinkedKey.OneOf_Association? = nil

  public var eip191: Xmtp_V3_MessageContents_Eip191Association {
    get {
      if case .eip191(let v)? = association {return v}
      return Xmtp_V3_MessageContents_Eip191Association()
    }
    set {association = .eip191(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Association: Equatable {
    case eip191(Xmtp_V3_MessageContents_Eip191Association)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_V3_MessageContents_VmacAccountLinkedKey.OneOf_Association, rhs: Xmtp_V3_MessageContents_VmacAccountLinkedKey.OneOf_Association) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.eip191, .eip191): return {
        guard case .eip191(let l) = lhs, case .eip191(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _key: Xmtp_V3_MessageContents_VmacUnsignedPublicKey? = nil
}

/// A key linked to an installation (e.g. signed by an installation identity key)
/// The purpose of the key is encoded in the signature
public struct Xmtp_V3_MessageContents_VmacInstallationLinkedKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: Xmtp_V3_MessageContents_VmacUnsignedPublicKey {
    get {return _key ?? Xmtp_V3_MessageContents_VmacUnsignedPublicKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _key: Xmtp_V3_MessageContents_VmacUnsignedPublicKey? = nil
}

/// A bundle of one time keys uploaded by a client, to be used as
/// input to (X)3DH exchanges with it. The server is expected to serve
/// and delete one prekey to anyone who requests one.
/// In our initial prototype we will not actually use one-time prekeys,
/// defaulting to fallback keys.
public struct Xmtp_V3_MessageContents_VmacOneTimeKeyTopupBundle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey {
    get {return _identityKey ?? Xmtp_V3_MessageContents_VmacAccountLinkedKey()}
    set {_identityKey = newValue}
  }
  /// Returns true if `identityKey` has been explicitly set.
  public var hasIdentityKey: Bool {return self._identityKey != nil}
  /// Clears the value of `identityKey`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityKey() {self._identityKey = nil}

  public var oneTimeKeys: [Xmtp_V3_MessageContents_VmacInstallationLinkedKey] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey? = nil
}

/// A fallback key uploaded by a client, which replaces any existing
/// fallback key. The server is expected to serve this prekey when
/// all one-time prekeys have been exhausted.
/// In our initial prototype we will always use the fallback key in place
/// of any one-time prekeys.
public struct Xmtp_V3_MessageContents_VmacFallbackKeyRotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey {
    get {return _identityKey ?? Xmtp_V3_MessageContents_VmacAccountLinkedKey()}
    set {_identityKey = newValue}
  }
  /// Returns true if `identityKey` has been explicitly set.
  public var hasIdentityKey: Bool {return self._identityKey != nil}
  /// Clears the value of `identityKey`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityKey() {self._identityKey = nil}

  public var fallbackKey: Xmtp_V3_MessageContents_VmacInstallationLinkedKey {
    get {return _fallbackKey ?? Xmtp_V3_MessageContents_VmacInstallationLinkedKey()}
    set {_fallbackKey = newValue}
  }
  /// Returns true if `fallbackKey` has been explicitly set.
  public var hasFallbackKey: Bool {return self._fallbackKey != nil}
  /// Clears the value of `fallbackKey`. Subsequent reads from it will return its default value.
  public mutating func clearFallbackKey() {self._fallbackKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey? = nil
  fileprivate var _fallbackKey: Xmtp_V3_MessageContents_VmacInstallationLinkedKey? = nil
}

/// A contact bundle served by the server to a requesting client
public struct Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey {
    get {return _identityKey ?? Xmtp_V3_MessageContents_VmacAccountLinkedKey()}
    set {_identityKey = newValue}
  }
  /// Returns true if `identityKey` has been explicitly set.
  public var hasIdentityKey: Bool {return self._identityKey != nil}
  /// Clears the value of `identityKey`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityKey() {self._identityKey = nil}

  public var fallbackKey: Xmtp_V3_MessageContents_VmacInstallationLinkedKey {
    get {return _fallbackKey ?? Xmtp_V3_MessageContents_VmacInstallationLinkedKey()}
    set {_fallbackKey = newValue}
  }
  /// Returns true if `fallbackKey` has been explicitly set.
  public var hasFallbackKey: Bool {return self._fallbackKey != nil}
  /// Clears the value of `fallbackKey`. Subsequent reads from it will return its default value.
  public mutating func clearFallbackKey() {self._fallbackKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identityKey: Xmtp_V3_MessageContents_VmacAccountLinkedKey? = nil
  fileprivate var _fallbackKey: Xmtp_V3_MessageContents_VmacInstallationLinkedKey? = nil
}

/// A wrapper for versions of the installation contact bundle to allow
/// upgradeability
public struct Xmtp_V3_MessageContents_InstallationContactBundle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Xmtp_V3_MessageContents_InstallationContactBundle.OneOf_Version? = nil

  public var v1: Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1 {
    get {
      if case .v1(let v)? = version {return v}
      return Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1()
    }
    set {version = .v1(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Version: Equatable {
    case v1(Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_V3_MessageContents_InstallationContactBundle.OneOf_Version, rhs: Xmtp_V3_MessageContents_InstallationContactBundle.OneOf_Version) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.v1, .v1): return {
        guard case .v1(let l) = lhs, case .v1(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_V3_MessageContents_VmacUnsignedPublicKey: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacUnsignedPublicKey.OneOf_Union: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacAccountLinkedKey: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacAccountLinkedKey.OneOf_Association: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacInstallationLinkedKey: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacOneTimeKeyTopupBundle: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacFallbackKeyRotation: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_InstallationContactBundle: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_InstallationContactBundle.OneOf_Version: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.v3.message_contents"

extension Xmtp_V3_MessageContents_VmacUnsignedPublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacUnsignedPublicKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "created_ns"),
    2: .same(proto: "curve25519"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.createdNs) }()
      case 2: try {
        var v: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519?
        var hadOneofValue = false
        if let current = self.union {
          hadOneofValue = true
          if case .curve25519(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.union = .curve25519(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.createdNs != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdNs, fieldNumber: 1)
    }
    try { if case .curve25519(let v)? = self.union {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey, rhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey) -> Bool {
    if lhs.createdNs != rhs.createdNs {return false}
    if lhs.union != rhs.union {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_V3_MessageContents_VmacUnsignedPublicKey.protoMessageName + ".VodozemacCurve25519"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519, rhs: Xmtp_V3_MessageContents_VmacUnsignedPublicKey.VodozemacCurve25519) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacAccountLinkedKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacAccountLinkedKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "eip_191"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      case 2: try {
        var v: Xmtp_V3_MessageContents_Eip191Association?
        var hadOneofValue = false
        if let current = self.association {
          hadOneofValue = true
          if case .eip191(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.association = .eip191(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if case .eip191(let v)? = self.association {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacAccountLinkedKey, rhs: Xmtp_V3_MessageContents_VmacAccountLinkedKey) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.association != rhs.association {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacInstallationLinkedKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacInstallationLinkedKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacInstallationLinkedKey, rhs: Xmtp_V3_MessageContents_VmacInstallationLinkedKey) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacOneTimeKeyTopupBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacOneTimeKeyTopupBundle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_key"),
    2: .standard(proto: "one_time_keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identityKey) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.oneTimeKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identityKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.oneTimeKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oneTimeKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacOneTimeKeyTopupBundle, rhs: Xmtp_V3_MessageContents_VmacOneTimeKeyTopupBundle) -> Bool {
    if lhs._identityKey != rhs._identityKey {return false}
    if lhs.oneTimeKeys != rhs.oneTimeKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacFallbackKeyRotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacFallbackKeyRotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_key"),
    2: .standard(proto: "fallback_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identityKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fallbackKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identityKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fallbackKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacFallbackKeyRotation, rhs: Xmtp_V3_MessageContents_VmacFallbackKeyRotation) -> Bool {
    if lhs._identityKey != rhs._identityKey {return false}
    if lhs._fallbackKey != rhs._fallbackKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VmacInstallationPublicKeyBundleV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_key"),
    2: .standard(proto: "fallback_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identityKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fallbackKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identityKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fallbackKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1, rhs: Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1) -> Bool {
    if lhs._identityKey != rhs._identityKey {return false}
    if lhs._fallbackKey != rhs._fallbackKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_InstallationContactBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InstallationContactBundle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v1"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_V3_MessageContents_VmacInstallationPublicKeyBundleV1?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v1(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v1(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .v1(let v)? = self.version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_InstallationContactBundle, rhs: Xmtp_V3_MessageContents_InstallationContactBundle) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
