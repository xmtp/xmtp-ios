// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: v3/message_contents/invite.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// V3 invite message structure

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// InvitationV1 is the invitation message meant to be encrypted as
/// ciphertext in InvitationEnvelopeV1 and decrypted by the recipient using the
/// provided inviter `InstallationContactBundle`
public struct Xmtp_V3_MessageContents_InvitationV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If the inviter contact bundle has the same wallet address as the current
  /// user, the invitee is the other wallet address in the conversation. If the
  /// inviter contact bundle has a different wallet address, the invitee wallet
  /// address MUST be the wallet address of the recipient of the invite.
  public var inviteeWalletAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// InvitationEnvelopeV1 is the encrypted invitation message and the contact of
/// the sender
public struct Xmtp_V3_MessageContents_InvitationEnvelopeV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This contains the public key that will be used to decrypt the ciphertext
  public var inviter: Xmtp_V3_MessageContents_InstallationContactBundle {
    get {return _inviter ?? Xmtp_V3_MessageContents_InstallationContactBundle()}
    set {_inviter = newValue}
  }
  /// Returns true if `inviter` has been explicitly set.
  public var hasInviter: Bool {return self._inviter != nil}
  /// Clears the value of `inviter`. Subsequent reads from it will return its default value.
  public mutating func clearInviter() {self._inviter = nil}

  /// Corresponds to an InvitationV1 message
  public var ciphertext: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inviter: Xmtp_V3_MessageContents_InstallationContactBundle? = nil
}

/// Wrapper message type
public struct Xmtp_V3_MessageContents_InvitationEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Xmtp_V3_MessageContents_InvitationEnvelope.OneOf_Version? = nil

  public var v1: Xmtp_V3_MessageContents_InvitationEnvelopeV1 {
    get {
      if case .v1(let v)? = version {return v}
      return Xmtp_V3_MessageContents_InvitationEnvelopeV1()
    }
    set {version = .v1(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Version: Equatable {
    case v1(Xmtp_V3_MessageContents_InvitationEnvelopeV1)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_V3_MessageContents_InvitationEnvelope.OneOf_Version, rhs: Xmtp_V3_MessageContents_InvitationEnvelope.OneOf_Version) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.v1, .v1): return {
        guard case .v1(let l) = lhs, case .v1(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_V3_MessageContents_InvitationV1: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_InvitationEnvelopeV1: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_InvitationEnvelope: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_InvitationEnvelope.OneOf_Version: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.v3.message_contents"

extension Xmtp_V3_MessageContents_InvitationV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "invitee_wallet_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inviteeWalletAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inviteeWalletAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.inviteeWalletAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_InvitationV1, rhs: Xmtp_V3_MessageContents_InvitationV1) -> Bool {
    if lhs.inviteeWalletAddress != rhs.inviteeWalletAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_InvitationEnvelopeV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationEnvelopeV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inviter"),
    2: .same(proto: "ciphertext"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inviter) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.ciphertext) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._inviter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.ciphertext.isEmpty {
      try visitor.visitSingularBytesField(value: self.ciphertext, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_InvitationEnvelopeV1, rhs: Xmtp_V3_MessageContents_InvitationEnvelopeV1) -> Bool {
    if lhs._inviter != rhs._inviter {return false}
    if lhs.ciphertext != rhs.ciphertext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_InvitationEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationEnvelope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v1"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_V3_MessageContents_InvitationEnvelopeV1?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v1(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v1(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .v1(let v)? = self.version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_InvitationEnvelope, rhs: Xmtp_V3_MessageContents_InvitationEnvelope) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
