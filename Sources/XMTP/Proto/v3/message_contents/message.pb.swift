// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: v3/message_contents/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Structure for messages in v3

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The version used for the decrypted padlock message payload
public enum Xmtp_V3_MessageContents_PadlockMessagePayloadVersion: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case one // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .one
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .one: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Xmtp_V3_MessageContents_PadlockMessagePayloadVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_V3_MessageContents_PadlockMessagePayloadVersion] = [
    .unspecified,
    .one,
  ]
}

#endif  // swift(>=4.2)

/// Metadata that is encrypted via SealedSender and only visible to the recipient
/// Currently we do not actually encrypt this, actual implementation of
/// SealedSender will be added shortly.
public struct Xmtp_V3_MessageContents_PadlockMessageSealedMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senderUserAddress: String = String()

  public var senderInstallationID: String = String()

  public var recipientUserAddress: String = String()

  public var recipientInstallationID: String = String()

  public var isPrekeyMessage: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Plaintext header included with messages, visible to all
/// Recipients can verify this header has not been tampered with.
/// Servers are unable to verify if the header has been tampered with.
public struct Xmtp_V3_MessageContents_PadlockMessageHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sentNs: UInt64 = 0

  /// PadlockMessageSealedMetadata
  public var sealedMetadata: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Encrypted body included with messages, only visible to recipients
/// When receiving a message:
/// 1. Decrypt the sealed metadata in the header via SealedSender
/// 2. Verify that you match the recipient_user_address and
///    recipient_installation_id. Verify that the sender_installation_id matches
///    the sender_user_address.
/// 2. Find the relevant session using the sender_user_address and
///    sender_installation_id in the unsealed metadata
/// 3. Use the session to decrypt the payload
/// 4. Verify that the header_signature in the decrypted payload was produced by
///    signing the header_bytes with the ed25519 key matching the
///    sender_installation_id
/// 5. Verify that both the sender_user and recipient_user are partipants of the
///    conversation referenced by convo_id
public struct Xmtp_V3_MessageContents_PadlockMessagePayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messageVersion: Xmtp_V3_MessageContents_PadlockMessagePayloadVersion = .unspecified

  /// Signs PadlockMessageHeader
  public var headerSignature: Xmtp_V3_MessageContents_EdDsaSignature {
    get {return _headerSignature ?? Xmtp_V3_MessageContents_EdDsaSignature()}
    set {_headerSignature = newValue}
  }
  /// Returns true if `headerSignature` has been explicitly set.
  public var hasHeaderSignature: Bool {return self._headerSignature != nil}
  /// Clears the value of `headerSignature`. Subsequent reads from it will return its default value.
  public mutating func clearHeaderSignature() {self._headerSignature = nil}

  public var convoID: String = String()

  /// EncodedContent
  public var contentBytes: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _headerSignature: Xmtp_V3_MessageContents_EdDsaSignature? = nil
}

/// Combines the plaintext header with the encrypted payload
public struct Xmtp_V3_MessageContents_PadlockMessageEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PadlockMessageHeader
  public var headerBytes: Data = Data()

  /// Encrypted PadlockMessagePayload
  public var ciphertext: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_V3_MessageContents_PadlockMessagePayloadVersion: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_PadlockMessageSealedMetadata: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_PadlockMessageHeader: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_PadlockMessagePayload: @unchecked Sendable {}
extension Xmtp_V3_MessageContents_PadlockMessageEnvelope: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.v3.message_contents"

extension Xmtp_V3_MessageContents_PadlockMessagePayloadVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PADLOCK_MESSAGE_PAYLOAD_VERSION_UNSPECIFIED"),
    1: .same(proto: "PADLOCK_MESSAGE_PAYLOAD_VERSION_ONE"),
  ]
}

extension Xmtp_V3_MessageContents_PadlockMessageSealedMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PadlockMessageSealedMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_user_address"),
    2: .standard(proto: "sender_installation_id"),
    3: .standard(proto: "recipient_user_address"),
    4: .standard(proto: "recipient_installation_id"),
    5: .standard(proto: "is_prekey_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderUserAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.senderInstallationID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.recipientUserAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipientInstallationID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isPrekeyMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderUserAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderUserAddress, fieldNumber: 1)
    }
    if !self.senderInstallationID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderInstallationID, fieldNumber: 2)
    }
    if !self.recipientUserAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientUserAddress, fieldNumber: 3)
    }
    if !self.recipientInstallationID.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientInstallationID, fieldNumber: 4)
    }
    if self.isPrekeyMessage != false {
      try visitor.visitSingularBoolField(value: self.isPrekeyMessage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_PadlockMessageSealedMetadata, rhs: Xmtp_V3_MessageContents_PadlockMessageSealedMetadata) -> Bool {
    if lhs.senderUserAddress != rhs.senderUserAddress {return false}
    if lhs.senderInstallationID != rhs.senderInstallationID {return false}
    if lhs.recipientUserAddress != rhs.recipientUserAddress {return false}
    if lhs.recipientInstallationID != rhs.recipientInstallationID {return false}
    if lhs.isPrekeyMessage != rhs.isPrekeyMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_PadlockMessageHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PadlockMessageHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sent_ns"),
    2: .standard(proto: "sealed_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sentNs) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.sealedMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sentNs != 0 {
      try visitor.visitSingularUInt64Field(value: self.sentNs, fieldNumber: 1)
    }
    if !self.sealedMetadata.isEmpty {
      try visitor.visitSingularBytesField(value: self.sealedMetadata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_PadlockMessageHeader, rhs: Xmtp_V3_MessageContents_PadlockMessageHeader) -> Bool {
    if lhs.sentNs != rhs.sentNs {return false}
    if lhs.sealedMetadata != rhs.sealedMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_PadlockMessagePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PadlockMessagePayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_version"),
    2: .standard(proto: "header_signature"),
    3: .standard(proto: "convo_id"),
    4: .standard(proto: "content_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.messageVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._headerSignature) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.convoID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.contentBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.messageVersion != .unspecified {
      try visitor.visitSingularEnumField(value: self.messageVersion, fieldNumber: 1)
    }
    try { if let v = self._headerSignature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.convoID.isEmpty {
      try visitor.visitSingularStringField(value: self.convoID, fieldNumber: 3)
    }
    if !self.contentBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.contentBytes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_PadlockMessagePayload, rhs: Xmtp_V3_MessageContents_PadlockMessagePayload) -> Bool {
    if lhs.messageVersion != rhs.messageVersion {return false}
    if lhs._headerSignature != rhs._headerSignature {return false}
    if lhs.convoID != rhs.convoID {return false}
    if lhs.contentBytes != rhs.contentBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_V3_MessageContents_PadlockMessageEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PadlockMessageEnvelope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "header_bytes"),
    2: .same(proto: "ciphertext"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.headerBytes) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.ciphertext) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.headerBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.headerBytes, fieldNumber: 1)
    }
    if !self.ciphertext.isEmpty {
      try visitor.visitSingularBytesField(value: self.ciphertext, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_V3_MessageContents_PadlockMessageEnvelope, rhs: Xmtp_V3_MessageContents_PadlockMessageEnvelope) -> Bool {
    if lhs.headerBytes != rhs.headerBytes {return false}
    if lhs.ciphertext != rhs.ciphertext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
