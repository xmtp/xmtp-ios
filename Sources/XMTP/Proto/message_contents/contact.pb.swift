// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message_contents/contact.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Contact Bundles are used to advertise user's public keys on the network.
/// They are published in well known topics so that other participants
/// can find them when they wish to communicate with the user.
/// The public keys are used to sign messages and to derive encryption keys
/// for some meta-messages, e.g. invitations.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
	struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
	typealias Version = _2
}

/// LEGACY: User key bundle V1 using PublicKeys.
/// The PublicKeys MUST be signed.
public struct Xmtp_MessageContents_ContactBundleV1 {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var keyBundle: Xmtp_MessageContents_PublicKeyBundle {
		get { return _keyBundle ?? Xmtp_MessageContents_PublicKeyBundle() }
		set { _keyBundle = newValue }
	}

	/// Returns true if `keyBundle` has been explicitly set.
	public var hasKeyBundle: Bool { return _keyBundle != nil }
	/// Clears the value of `keyBundle`. Subsequent reads from it will return its default value.
	public mutating func clearKeyBundle() { _keyBundle = nil }

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}

	fileprivate var _keyBundle: Xmtp_MessageContents_PublicKeyBundle?
}

/// User key bundle V2 using SignedPublicKeys.
public struct Xmtp_MessageContents_ContactBundleV2 {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var keyBundle: Xmtp_MessageContents_SignedPublicKeyBundle {
		get { return _keyBundle ?? Xmtp_MessageContents_SignedPublicKeyBundle() }
		set { _keyBundle = newValue }
	}

	/// Returns true if `keyBundle` has been explicitly set.
	public var hasKeyBundle: Bool { return _keyBundle != nil }
	/// Clears the value of `keyBundle`. Subsequent reads from it will return its default value.
	public mutating func clearKeyBundle() { _keyBundle = nil }

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}

	fileprivate var _keyBundle: Xmtp_MessageContents_SignedPublicKeyBundle?
}

/// Versioned ContactBundle
public struct Xmtp_MessageContents_ContactBundle {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var version: Xmtp_MessageContents_ContactBundle.OneOf_Version?

	public var v1: Xmtp_MessageContents_ContactBundleV1 {
		get {
			if case let .v1(v)? = version { return v }
			return Xmtp_MessageContents_ContactBundleV1()
		}
		set { version = .v1(newValue) }
	}

	public var v2: Xmtp_MessageContents_ContactBundleV2 {
		get {
			if case let .v2(v)? = version { return v }
			return Xmtp_MessageContents_ContactBundleV2()
		}
		set { version = .v2(newValue) }
	}

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public enum OneOf_Version: Equatable {
		case v1(Xmtp_MessageContents_ContactBundleV1)
		case v2(Xmtp_MessageContents_ContactBundleV2)

		#if !swift(>=4.1)
			public static func == (lhs: Xmtp_MessageContents_ContactBundle.OneOf_Version, rhs: Xmtp_MessageContents_ContactBundle.OneOf_Version) -> Bool {
				// The use of inline closures is to circumvent an issue where the compiler
				// allocates stack space for every case branch when no optimizations are
				// enabled. https://github.com/apple/swift-protobuf/issues/1034
				switch (lhs, rhs) {
				case (.v1, .v1): return {
						guard case let .v1(l) = lhs, case let .v1(r) = rhs else { preconditionFailure() }
						return l == r
					}()
				case (.v2, .v2): return {
						guard case let .v2(l) = lhs, case let .v2(r) = rhs else { preconditionFailure() }
						return l == r
					}()
				default: return false
				}
			}
		#endif
	}

	public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
	extension Xmtp_MessageContents_ContactBundleV1: @unchecked Sendable {}
	extension Xmtp_MessageContents_ContactBundleV2: @unchecked Sendable {}
	extension Xmtp_MessageContents_ContactBundle: @unchecked Sendable {}
	extension Xmtp_MessageContents_ContactBundle.OneOf_Version: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "xmtp.message_contents"

extension Xmtp_MessageContents_ContactBundleV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".ContactBundleV1"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "key_bundle"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularMessageField(value: &_keyBundle)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		// The use of inline closures is to circumvent an issue where the compiler
		// allocates stack space for every if/case branch local when no optimizations
		// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
		// https://github.com/apple/swift-protobuf/issues/1182
		try { if let v = self._keyBundle {
			try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
		} }()
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Xmtp_MessageContents_ContactBundleV1, rhs: Xmtp_MessageContents_ContactBundleV1) -> Bool {
		if lhs._keyBundle != rhs._keyBundle { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Xmtp_MessageContents_ContactBundleV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".ContactBundleV2"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .standard(proto: "key_bundle"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try try decoder.decodeSingularMessageField(value: &_keyBundle)
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		// The use of inline closures is to circumvent an issue where the compiler
		// allocates stack space for every if/case branch local when no optimizations
		// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
		// https://github.com/apple/swift-protobuf/issues/1182
		try { if let v = self._keyBundle {
			try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
		} }()
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Xmtp_MessageContents_ContactBundleV2, rhs: Xmtp_MessageContents_ContactBundleV2) -> Bool {
		if lhs._keyBundle != rhs._keyBundle { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}

extension Xmtp_MessageContents_ContactBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
	public static let protoMessageName: String = _protobuf_package + ".ContactBundle"
	public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
		1: .same(proto: "v1"),
		2: .same(proto: "v2"),
	]

	public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
		while let fieldNumber = try decoder.nextFieldNumber() {
			// The use of inline closures is to circumvent an issue where the compiler
			// allocates stack space for every case branch when no optimizations are
			// enabled. https://github.com/apple/swift-protobuf/issues/1034
			switch fieldNumber {
			case 1: try {
					var v: Xmtp_MessageContents_ContactBundleV1?
					var hadOneofValue = false
					if let current = self.version {
						hadOneofValue = true
						if case let .v1(m) = current { v = m }
					}
					try decoder.decodeSingularMessageField(value: &v)
					if let v = v {
						if hadOneofValue { try decoder.handleConflictingOneOf() }
						self.version = .v1(v)
					}
				}()
			case 2: try {
					var v: Xmtp_MessageContents_ContactBundleV2?
					var hadOneofValue = false
					if let current = self.version {
						hadOneofValue = true
						if case let .v2(m) = current { v = m }
					}
					try decoder.decodeSingularMessageField(value: &v)
					if let v = v {
						if hadOneofValue { try decoder.handleConflictingOneOf() }
						self.version = .v2(v)
					}
				}()
			default: break
			}
		}
	}

	public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
		// The use of inline closures is to circumvent an issue where the compiler
		// allocates stack space for every if/case branch local when no optimizations
		// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
		// https://github.com/apple/swift-protobuf/issues/1182
		switch version {
		case .v1?: try {
				guard case let .v1(v)? = self.version else { preconditionFailure() }
				try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
			}()
		case .v2?: try {
				guard case let .v2(v)? = self.version else { preconditionFailure() }
				try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
			}()
		case nil: break
		}
		try unknownFields.traverse(visitor: &visitor)
	}

	public static func == (lhs: Xmtp_MessageContents_ContactBundle, rhs: Xmtp_MessageContents_ContactBundle) -> Bool {
		if lhs.version != rhs.version { return false }
		if lhs.unknownFields != rhs.unknownFields { return false }
		return true
	}
}
