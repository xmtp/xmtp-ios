// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/association.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Associations and signatures

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Allows for us to update the format of the association text without
/// incrementing the entire proto
public enum Xmtp_Mls_MessageContents_AssociationTextVersion: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case associationTextVersion1 // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .associationTextVersion1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .associationTextVersion1: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_AssociationTextVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_AssociationTextVersion] = [
    .unspecified,
    .associationTextVersion1,
  ]
}

#endif  // swift(>=4.2)

/// Used for "Grant Messaging Access" associations
public struct Xmtp_Mls_MessageContents_GrantMessagingAccessAssociation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var associationTextVersion: Xmtp_Mls_MessageContents_AssociationTextVersion = .unspecified

  /// EIP-191 signature
  public var signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature {
    get {return _signature ?? Xmtp_Mls_MessageContents_RecoverableEcdsaSignature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var accountAddress: String = String()

  public var createdNs: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature? = nil
}

/// Used for "Revoke Messaging Access" associations
public struct Xmtp_Mls_MessageContents_RevokeMessagingAccessAssociation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var associationTextVersion: Xmtp_Mls_MessageContents_AssociationTextVersion = .unspecified

  /// EIP-191 signature
  public var signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature {
    get {return _signature ?? Xmtp_Mls_MessageContents_RecoverableEcdsaSignature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var accountAddress: String = String()

  public var createdNs: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature? = nil
}

/// LegacyCreateIdentityAssociation is used when a v3 installation key
/// is signed by a v2 identity key, which in turn is signed via a
/// 'CreateIdentity' wallet signature
public struct Xmtp_Mls_MessageContents_LegacyCreateIdentityAssociation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signs SHA-256 hash of installation key
  public var signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature {
    get {return _signature ?? Xmtp_Mls_MessageContents_RecoverableEcdsaSignature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  /// created_ns is encoded inside serialized key, account_address is recoverable
  /// from the SignedPublicKey signature
  public var signedLegacyCreateIdentityKey: Xmtp_MessageContents_SignedPublicKey {
    get {return _signedLegacyCreateIdentityKey ?? Xmtp_MessageContents_SignedPublicKey()}
    set {_signedLegacyCreateIdentityKey = newValue}
  }
  /// Returns true if `signedLegacyCreateIdentityKey` has been explicitly set.
  public var hasSignedLegacyCreateIdentityKey: Bool {return self._signedLegacyCreateIdentityKey != nil}
  /// Clears the value of `signedLegacyCreateIdentityKey`. Subsequent reads from it will return its default value.
  public mutating func clearSignedLegacyCreateIdentityKey() {self._signedLegacyCreateIdentityKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signature: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature? = nil
  fileprivate var _signedLegacyCreateIdentityKey: Xmtp_MessageContents_SignedPublicKey? = nil
}

/// RecoverableEcdsaSignature
public struct Xmtp_Mls_MessageContents_RecoverableEcdsaSignature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 65-bytes [ R || S || V ], with recovery id as the last byte
  public var bytes: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EdDSA signature bytes matching RFC 8032
public struct Xmtp_Mls_MessageContents_EdDsaSignature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bytes: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_AssociationTextVersion: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GrantMessagingAccessAssociation: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_RevokeMessagingAccessAssociation: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_LegacyCreateIdentityAssociation: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_RecoverableEcdsaSignature: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_EdDsaSignature: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_AssociationTextVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASSOCIATION_TEXT_VERSION_UNSPECIFIED"),
    1: .same(proto: "ASSOCIATION_TEXT_VERSION_1"),
  ]
}

extension Xmtp_Mls_MessageContents_GrantMessagingAccessAssociation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GrantMessagingAccessAssociation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "association_text_version"),
    2: .same(proto: "signature"),
    3: .standard(proto: "account_address"),
    4: .standard(proto: "created_ns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.associationTextVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.createdNs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.associationTextVersion != .unspecified {
      try visitor.visitSingularEnumField(value: self.associationTextVersion, fieldNumber: 1)
    }
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 3)
    }
    if self.createdNs != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdNs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GrantMessagingAccessAssociation, rhs: Xmtp_Mls_MessageContents_GrantMessagingAccessAssociation) -> Bool {
    if lhs.associationTextVersion != rhs.associationTextVersion {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.createdNs != rhs.createdNs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_RevokeMessagingAccessAssociation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevokeMessagingAccessAssociation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "association_text_version"),
    2: .same(proto: "signature"),
    3: .standard(proto: "account_address"),
    4: .standard(proto: "created_ns"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.associationTextVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.createdNs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.associationTextVersion != .unspecified {
      try visitor.visitSingularEnumField(value: self.associationTextVersion, fieldNumber: 1)
    }
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 3)
    }
    if self.createdNs != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdNs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_RevokeMessagingAccessAssociation, rhs: Xmtp_Mls_MessageContents_RevokeMessagingAccessAssociation) -> Bool {
    if lhs.associationTextVersion != rhs.associationTextVersion {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.createdNs != rhs.createdNs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_LegacyCreateIdentityAssociation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LegacyCreateIdentityAssociation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .standard(proto: "signed_legacy_create_identity_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signedLegacyCreateIdentityKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signedLegacyCreateIdentityKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_LegacyCreateIdentityAssociation, rhs: Xmtp_Mls_MessageContents_LegacyCreateIdentityAssociation) -> Bool {
    if lhs._signature != rhs._signature {return false}
    if lhs._signedLegacyCreateIdentityKey != rhs._signedLegacyCreateIdentityKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_RecoverableEcdsaSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecoverableEcdsaSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature, rhs: Xmtp_Mls_MessageContents_RecoverableEcdsaSignature) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_EdDsaSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EdDsaSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_EdDsaSignature, rhs: Xmtp_Mls_MessageContents_EdDsaSignature) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
