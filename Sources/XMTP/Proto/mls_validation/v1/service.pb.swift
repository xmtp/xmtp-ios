// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls_validation/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Message API

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Contains a batch of serialized Key Packages
public struct Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyPackages: [Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Wrapper for each key package
  public struct KeyPackage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var keyPackageBytesTlsSerialized: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Response to ValidateKeyPackagesRequest
public struct Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An individual response to one key package
  public struct ValidationResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var installationID: Data = Data()

    public var accountAddress: String = String()

    public var credentialIdentityBytes: Data = Data()

    public var expiration: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Contains a batch of serialized Group Messages
public struct Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupMessages: [Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Wrapper for each message
  public struct GroupMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var groupMessageBytesTlsSerialized: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Response to ValidateGroupMessagesRequest
public struct Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An individual response to one message
  public struct ValidationResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var groupID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls_validation.v1"

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateKeyPackagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_packages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.keyPackages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyPackages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest) -> Bool {
    if lhs.keyPackages != rhs.keyPackages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.protoMessageName + ".KeyPackage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_package_bytes_tls_serialized"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.keyPackageBytesTlsSerialized) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPackageBytesTlsSerialized.isEmpty {
      try visitor.visitSingularBytesField(value: self.keyPackageBytesTlsSerialized, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage) -> Bool {
    if lhs.keyPackageBytesTlsSerialized != rhs.keyPackageBytesTlsSerialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateKeyPackagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.protoMessageName + ".ValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "installation_id"),
    4: .standard(proto: "account_address"),
    5: .standard(proto: "credential_identity_bytes"),
    6: .same(proto: "expiration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.installationID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.credentialIdentityBytes) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.expiration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.installationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.installationID, fieldNumber: 3)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 4)
    }
    if !self.credentialIdentityBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.credentialIdentityBytes, fieldNumber: 5)
    }
    if self.expiration != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiration, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.installationID != rhs.installationID {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.credentialIdentityBytes != rhs.credentialIdentityBytes {return false}
    if lhs.expiration != rhs.expiration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateGroupMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_messages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groupMessages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupMessages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupMessages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest) -> Bool {
    if lhs.groupMessages != rhs.groupMessages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.protoMessageName + ".GroupMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_message_bytes_tls_serialized"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupMessageBytesTlsSerialized) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupMessageBytesTlsSerialized.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupMessageBytesTlsSerialized, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage) -> Bool {
    if lhs.groupMessageBytesTlsSerialized != rhs.groupMessageBytesTlsSerialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateGroupMessagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.protoMessageName + ".ValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
