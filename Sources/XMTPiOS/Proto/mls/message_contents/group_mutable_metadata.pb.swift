// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/group_mutable_metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Group mutable metadata

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message for group mutable metadata
public struct Xmtp_Mls_MessageContents_GroupMutableMetadataV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Map to store various metadata attributes (Group name, etc.)
  public var attributes: Dictionary<String,String> = [:]

  public var adminList: Xmtp_Mls_MessageContents_Inboxes {
    get {return _adminList ?? Xmtp_Mls_MessageContents_Inboxes()}
    set {_adminList = newValue}
  }
  /// Returns true if `adminList` has been explicitly set.
  public var hasAdminList: Bool {return self._adminList != nil}
  /// Clears the value of `adminList`. Subsequent reads from it will return its default value.
  public mutating func clearAdminList() {self._adminList = nil}

  /// Creator starts as only super_admin
  /// Only super_admin can add/remove other super_admin
  public var superAdminList: Xmtp_Mls_MessageContents_Inboxes {
    get {return _superAdminList ?? Xmtp_Mls_MessageContents_Inboxes()}
    set {_superAdminList = newValue}
  }
  /// Returns true if `superAdminList` has been explicitly set.
  public var hasSuperAdminList: Bool {return self._superAdminList != nil}
  /// Clears the value of `superAdminList`. Subsequent reads from it will return its default value.
  public mutating func clearSuperAdminList() {self._superAdminList = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _adminList: Xmtp_Mls_MessageContents_Inboxes? = nil
  fileprivate var _superAdminList: Xmtp_Mls_MessageContents_Inboxes? = nil
}

/// Wrapper around a list of repeated Inbox Ids
public struct Xmtp_Mls_MessageContents_Inboxes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inboxIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_GroupMutableMetadataV1: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_Inboxes: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_GroupMutableMetadataV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMutableMetadataV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attributes"),
    2: .standard(proto: "admin_list"),
    3: .standard(proto: "super_admin_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.attributes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._adminList) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._superAdminList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.attributes, fieldNumber: 1)
    }
    try { if let v = self._adminList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._superAdminList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupMutableMetadataV1, rhs: Xmtp_Mls_MessageContents_GroupMutableMetadataV1) -> Bool {
    if lhs.attributes != rhs.attributes {return false}
    if lhs._adminList != rhs._adminList {return false}
    if lhs._superAdminList != rhs._superAdminList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_Inboxes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Inboxes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inbox_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.inboxIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inboxIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inboxIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_Inboxes, rhs: Xmtp_Mls_MessageContents_Inboxes) -> Bool {
    if lhs.inboxIds != rhs.inboxIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
