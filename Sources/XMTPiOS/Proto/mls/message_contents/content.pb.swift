// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/content.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Message content encoding structures
/// Copied from V2 code so that we can eventually retire all V2 message content

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Recognized compression algorithms
/// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
public enum Xmtp_Mls_MessageContents_Compression: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case deflate // = 0
  case gzip // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .deflate
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .deflate
    case 1: self = .gzip
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .deflate: return 0
    case .gzip: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_Compression: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_Compression] = [
    .deflate,
    .gzip,
  ]
}

#endif  // swift(>=4.2)

/// ContentTypeId is used to identify the type of content stored in a Message.
public struct Xmtp_Mls_MessageContents_ContentTypeId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority governing this content type
  public var authorityID: String = String()

  /// type identifier
  public var typeID: String = String()

  /// major version of the type
  public var versionMajor: UInt32 = 0

  /// minor version of the type
  public var versionMinor: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// EncodedContent bundles the content with metadata identifying its type
/// and parameters required for correct decoding and presentation of the content.
public struct Xmtp_Mls_MessageContents_EncodedContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// content type identifier used to match the payload with
  /// the correct decoding machinery
  public var type: Xmtp_Mls_MessageContents_ContentTypeId {
    get {return _type ?? Xmtp_Mls_MessageContents_ContentTypeId()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// optional encoding parameters required to correctly decode the content
  public var parameters: Dictionary<String,String> = [:]

  /// optional fallback description of the content that can be used in case
  /// the client cannot decode or render the content
  public var fallback: String {
    get {return _fallback ?? String()}
    set {_fallback = newValue}
  }
  /// Returns true if `fallback` has been explicitly set.
  public var hasFallback: Bool {return self._fallback != nil}
  /// Clears the value of `fallback`. Subsequent reads from it will return its default value.
  public mutating func clearFallback() {self._fallback = nil}

  /// optional compression; the value indicates algorithm used to
  /// compress the encoded content bytes
  public var compression: Xmtp_Mls_MessageContents_Compression {
    get {return _compression ?? .deflate}
    set {_compression = newValue}
  }
  /// Returns true if `compression` has been explicitly set.
  public var hasCompression: Bool {return self._compression != nil}
  /// Clears the value of `compression`. Subsequent reads from it will return its default value.
  public mutating func clearCompression() {self._compression = nil}

  /// encoded content itself
  public var content: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: Xmtp_Mls_MessageContents_ContentTypeId? = nil
  fileprivate var _fallback: String? = nil
  fileprivate var _compression: Xmtp_Mls_MessageContents_Compression? = nil
}

/// A PlaintextEnvelope is the outermost payload that gets encrypted by MLS
public struct Xmtp_Mls_MessageContents_PlaintextEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Selector which declares which version of the EncodedContent this
  /// PlaintextEnvelope is
  public var content: Xmtp_Mls_MessageContents_PlaintextEnvelope.OneOf_Content? = nil

  public var v1: Xmtp_Mls_MessageContents_PlaintextEnvelope.V1 {
    get {
      if case .v1(let v)? = content {return v}
      return Xmtp_Mls_MessageContents_PlaintextEnvelope.V1()
    }
    set {content = .v1(newValue)}
  }

  public var v2: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2 {
    get {
      if case .v2(let v)? = content {return v}
      return Xmtp_Mls_MessageContents_PlaintextEnvelope.V2()
    }
    set {content = .v2(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Selector which declares which version of the EncodedContent this
  /// PlaintextEnvelope is
  public enum OneOf_Content: Equatable {
    case v1(Xmtp_Mls_MessageContents_PlaintextEnvelope.V1)
    case v2(Xmtp_Mls_MessageContents_PlaintextEnvelope.V2)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.OneOf_Content, rhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.v1, .v1): return {
        guard case .v1(let l) = lhs, case .v1(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.v2, .v2): return {
        guard case .v2(let l) = lhs, case .v2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Version 1 of the encrypted envelope
  public struct V1 {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Expected to be EncodedContent
    public var content: Data = Data()

    /// A unique value that can be used to ensure that the same content can
    /// produce different hashes. May be the sender timestamp.
    public var idempotencyKey: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Version 2 of the encrypted envelope
  public struct V2 {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A unique value that can be used to ensure that the same content can
    /// produce different hashes. May be the sender timestamp.
    public var idempotencyKey: String = String()

    public var messageType: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2.OneOf_MessageType? = nil

    /// Expected to be EncodedContent
    public var content: Data {
      get {
        if case .content(let v)? = messageType {return v}
        return Data()
      }
      set {messageType = .content(newValue)}
    }

    /// Initiator sends a request to receive message history
    public var request: Xmtp_Mls_MessageContents_MessageHistoryRequest {
      get {
        if case .request(let v)? = messageType {return v}
        return Xmtp_Mls_MessageContents_MessageHistoryRequest()
      }
      set {messageType = .request(newValue)}
    }

    /// Some other authorized installation sends a reply
    public var reply: Xmtp_Mls_MessageContents_MessageHistoryReply {
      get {
        if case .reply(let v)? = messageType {return v}
        return Xmtp_Mls_MessageContents_MessageHistoryReply()
      }
      set {messageType = .reply(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_MessageType: Equatable {
      /// Expected to be EncodedContent
      case content(Data)
      /// Initiator sends a request to receive message history
      case request(Xmtp_Mls_MessageContents_MessageHistoryRequest)
      /// Some other authorized installation sends a reply
      case reply(Xmtp_Mls_MessageContents_MessageHistoryReply)

    #if !swift(>=4.1)
      public static func ==(lhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2.OneOf_MessageType, rhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2.OneOf_MessageType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.content, .content): return {
          guard case .content(let l) = lhs, case .content(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.request, .request): return {
          guard case .request(let l) = lhs, case .request(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.reply, .reply): return {
          guard case .reply(let l) = lhs, case .reply(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

/// Initiator or new installation id requesting a history will send a request
public struct Xmtp_Mls_MessageContents_MessageHistoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier for each request
  public var requestID: String = String()

  /// Ensures a human is in the loop
  public var pinCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Pre-existing installation id capable of supplying a history sends this reply
public struct Xmtp_Mls_MessageContents_MessageHistoryReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Must match an existing request_id from a message history request
  public var requestID: String = String()

  /// Where the messages can be retrieved from
  public var url: String = String()

  /// Generated input 'secret' for the AES Key used to encrypt the message-bundle
  public var encryptionKey: Xmtp_Mls_MessageContents_MessageHistoryKeyType {
    get {return _encryptionKey ?? Xmtp_Mls_MessageContents_MessageHistoryKeyType()}
    set {_encryptionKey = newValue}
  }
  /// Returns true if `encryptionKey` has been explicitly set.
  public var hasEncryptionKey: Bool {return self._encryptionKey != nil}
  /// Clears the value of `encryptionKey`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionKey() {self._encryptionKey = nil}

  /// Generated input 'secret' for the HMAC Key used to sign the bundle_hash
  public var signingKey: Xmtp_Mls_MessageContents_MessageHistoryKeyType {
    get {return _signingKey ?? Xmtp_Mls_MessageContents_MessageHistoryKeyType()}
    set {_signingKey = newValue}
  }
  /// Returns true if `signingKey` has been explicitly set.
  public var hasSigningKey: Bool {return self._signingKey != nil}
  /// Clears the value of `signingKey`. Subsequent reads from it will return its default value.
  public mutating func clearSigningKey() {self._signingKey = nil}

  /// HMAC Signature of the message-bundle
  public var bundleHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _encryptionKey: Xmtp_Mls_MessageContents_MessageHistoryKeyType? = nil
  fileprivate var _signingKey: Xmtp_Mls_MessageContents_MessageHistoryKeyType? = nil
}

/// Key used to encrypt or sign the message-bundle
public struct Xmtp_Mls_MessageContents_MessageHistoryKeyType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: Xmtp_Mls_MessageContents_MessageHistoryKeyType.OneOf_Key? = nil

  public var chacha20Poly1305: Data {
    get {
      if case .chacha20Poly1305(let v)? = key {return v}
      return Data()
    }
    set {key = .chacha20Poly1305(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Key: Equatable {
    case chacha20Poly1305(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_Mls_MessageContents_MessageHistoryKeyType.OneOf_Key, rhs: Xmtp_Mls_MessageContents_MessageHistoryKeyType.OneOf_Key) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.chacha20Poly1305, .chacha20Poly1305): return {
        guard case .chacha20Poly1305(let l) = lhs, case .chacha20Poly1305(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_Compression: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_ContentTypeId: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_EncodedContent: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PlaintextEnvelope: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PlaintextEnvelope.OneOf_Content: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PlaintextEnvelope.V1: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PlaintextEnvelope.V2: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PlaintextEnvelope.V2.OneOf_MessageType: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MessageHistoryRequest: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MessageHistoryReply: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MessageHistoryKeyType: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MessageHistoryKeyType.OneOf_Key: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_Compression: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPRESSION_DEFLATE"),
    1: .same(proto: "COMPRESSION_GZIP"),
  ]
}

extension Xmtp_Mls_MessageContents_ContentTypeId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentTypeId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "authority_id"),
    2: .standard(proto: "type_id"),
    3: .standard(proto: "version_major"),
    4: .standard(proto: "version_minor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authorityID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.typeID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.versionMajor) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.versionMinor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authorityID.isEmpty {
      try visitor.visitSingularStringField(value: self.authorityID, fieldNumber: 1)
    }
    if !self.typeID.isEmpty {
      try visitor.visitSingularStringField(value: self.typeID, fieldNumber: 2)
    }
    if self.versionMajor != 0 {
      try visitor.visitSingularUInt32Field(value: self.versionMajor, fieldNumber: 3)
    }
    if self.versionMinor != 0 {
      try visitor.visitSingularUInt32Field(value: self.versionMinor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_ContentTypeId, rhs: Xmtp_Mls_MessageContents_ContentTypeId) -> Bool {
    if lhs.authorityID != rhs.authorityID {return false}
    if lhs.typeID != rhs.typeID {return false}
    if lhs.versionMajor != rhs.versionMajor {return false}
    if lhs.versionMinor != rhs.versionMinor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_EncodedContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncodedContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "parameters"),
    3: .same(proto: "fallback"),
    5: .same(proto: "compression"),
    4: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fallback) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._compression) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 2)
    }
    try { if let v = self._fallback {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 4)
    }
    try { if let v = self._compression {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_EncodedContent, rhs: Xmtp_Mls_MessageContents_EncodedContent) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs._fallback != rhs._fallback {return false}
    if lhs._compression != rhs._compression {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PlaintextEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaintextEnvelope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v1"),
    2: .same(proto: "v2"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_Mls_MessageContents_PlaintextEnvelope.V1?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .v1(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .v1(v)
        }
      }()
      case 2: try {
        var v: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .v2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .v2(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .v1?: try {
      guard case .v1(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .v2?: try {
      guard case .v2(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PlaintextEnvelope, rhs: Xmtp_Mls_MessageContents_PlaintextEnvelope) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PlaintextEnvelope.V1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_PlaintextEnvelope.protoMessageName + ".V1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "idempotency_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.idempotencyKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 1)
    }
    if !self.idempotencyKey.isEmpty {
      try visitor.visitSingularStringField(value: self.idempotencyKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V1, rhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V1) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.idempotencyKey != rhs.idempotencyKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PlaintextEnvelope.V2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_PlaintextEnvelope.protoMessageName + ".V2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "idempotency_key"),
    2: .same(proto: "content"),
    3: .same(proto: "request"),
    4: .same(proto: "reply"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.idempotencyKey) }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.messageType != nil {try decoder.handleConflictingOneOf()}
          self.messageType = .content(v)
        }
      }()
      case 3: try {
        var v: Xmtp_Mls_MessageContents_MessageHistoryRequest?
        var hadOneofValue = false
        if let current = self.messageType {
          hadOneofValue = true
          if case .request(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageType = .request(v)
        }
      }()
      case 4: try {
        var v: Xmtp_Mls_MessageContents_MessageHistoryReply?
        var hadOneofValue = false
        if let current = self.messageType {
          hadOneofValue = true
          if case .reply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageType = .reply(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.idempotencyKey.isEmpty {
      try visitor.visitSingularStringField(value: self.idempotencyKey, fieldNumber: 1)
    }
    switch self.messageType {
    case .content?: try {
      guard case .content(let v)? = self.messageType else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case .request?: try {
      guard case .request(let v)? = self.messageType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .reply?: try {
      guard case .reply(let v)? = self.messageType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2, rhs: Xmtp_Mls_MessageContents_PlaintextEnvelope.V2) -> Bool {
    if lhs.idempotencyKey != rhs.idempotencyKey {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MessageHistoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageHistoryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "pin_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pinCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.pinCode.isEmpty {
      try visitor.visitSingularStringField(value: self.pinCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MessageHistoryRequest, rhs: Xmtp_Mls_MessageContents_MessageHistoryRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.pinCode != rhs.pinCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MessageHistoryReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageHistoryReply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "url"),
    3: .standard(proto: "encryption_key"),
    4: .standard(proto: "signing_key"),
    5: .standard(proto: "bundle_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._encryptionKey) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._signingKey) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.bundleHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try { if let v = self._encryptionKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._signingKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.bundleHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.bundleHash, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MessageHistoryReply, rhs: Xmtp_Mls_MessageContents_MessageHistoryReply) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.url != rhs.url {return false}
    if lhs._encryptionKey != rhs._encryptionKey {return false}
    if lhs._signingKey != rhs._signingKey {return false}
    if lhs.bundleHash != rhs.bundleHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MessageHistoryKeyType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageHistoryKeyType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chacha20_poly1305"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.key != nil {try decoder.handleConflictingOneOf()}
          self.key = .chacha20Poly1305(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .chacha20Poly1305(let v)? = self.key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MessageHistoryKeyType, rhs: Xmtp_Mls_MessageContents_MessageHistoryKeyType) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
