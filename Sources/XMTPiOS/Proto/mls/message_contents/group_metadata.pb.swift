// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/group_metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Group immutable metadata

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Defines the type of conversation
public enum Xmtp_Mls_MessageContents_ConversationType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case group // = 1
  case dm // = 2
  case sync // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .group
    case 2: self = .dm
    case 3: self = .sync
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .group: return 1
    case .dm: return 2
    case .sync: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_ConversationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_ConversationType] = [
    .unspecified,
    .group,
    .dm,
    .sync,
  ]
}

#endif  // swift(>=4.2)

/// Parent message for group metadata
public struct Xmtp_Mls_MessageContents_GroupMetadataV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var conversationType: Xmtp_Mls_MessageContents_ConversationType = .unspecified

  /// This will be removed soon
  public var creatorAccountAddress: String = String()

  public var creatorInboxID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_ConversationType: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GroupMetadataV1: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_ConversationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONVERSATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "CONVERSATION_TYPE_GROUP"),
    2: .same(proto: "CONVERSATION_TYPE_DM"),
    3: .same(proto: "CONVERSATION_TYPE_SYNC"),
  ]
}

extension Xmtp_Mls_MessageContents_GroupMetadataV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMetadataV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_type"),
    2: .standard(proto: "creator_account_address"),
    3: .standard(proto: "creator_inbox_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.conversationType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creatorAccountAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.creatorInboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.conversationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.conversationType, fieldNumber: 1)
    }
    if !self.creatorAccountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorAccountAddress, fieldNumber: 2)
    }
    if !self.creatorInboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorInboxID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupMetadataV1, rhs: Xmtp_Mls_MessageContents_GroupMetadataV1) -> Bool {
    if lhs.conversationType != rhs.conversationType {return false}
    if lhs.creatorAccountAddress != rhs.creatorAccountAddress {return false}
    if lhs.creatorInboxID != rhs.creatorInboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
