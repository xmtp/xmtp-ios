// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/transcript_messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Message content encoding structures

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A group member and affected installation IDs
public struct Xmtp_Mls_MessageContents_MembershipChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationIds: [Data] = []

  public var accountAddress: String = String()

  public var initiatedByAccountAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The group membership change proto
public struct Xmtp_Mls_MessageContents_GroupMembershipChanges {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Members that have been added in the commit
  public var membersAdded: [Xmtp_Mls_MessageContents_MembershipChange] = []

  /// Members that have been removed in the commit
  public var membersRemoved: [Xmtp_Mls_MessageContents_MembershipChange] = []

  /// Installations that have been added in the commit, grouped by member
  public var installationsAdded: [Xmtp_Mls_MessageContents_MembershipChange] = []

  /// Installations removed in the commit, grouped by member
  public var installationsRemoved: [Xmtp_Mls_MessageContents_MembershipChange] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A summary of the changes in a commit.
/// Includes added/removed inboxes and changes to metadata
public struct Xmtp_Mls_MessageContents_GroupUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var initiatedByInboxID: String = String()

  /// The inboxes added in the commit
  public var addedInboxes: [Xmtp_Mls_MessageContents_GroupUpdated.Inbox] = []

  /// The inboxes removed in the commit
  public var removedInboxes: [Xmtp_Mls_MessageContents_GroupUpdated.Inbox] = []

  /// The metadata changes in the commit
  public var metadataFieldChanges: [Xmtp_Mls_MessageContents_GroupUpdated.MetadataFieldChange] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An inbox that was added or removed in this commit
  public struct Inbox {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var inboxID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// A summary of a change to the mutable metadata
  public struct MetadataFieldChange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field that was changed
    public var fieldName: String = String()

    /// The previous value
    public var oldValue: String {
      get {return _oldValue ?? String()}
      set {_oldValue = newValue}
    }
    /// Returns true if `oldValue` has been explicitly set.
    public var hasOldValue: Bool {return self._oldValue != nil}
    /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
    public mutating func clearOldValue() {self._oldValue = nil}

    /// The updated value
    public var newValue: String {
      get {return _newValue ?? String()}
      set {_newValue = newValue}
    }
    /// Returns true if `newValue` has been explicitly set.
    public var hasNewValue: Bool {return self._newValue != nil}
    /// Clears the value of `newValue`. Subsequent reads from it will return its default value.
    public mutating func clearNewValue() {self._newValue = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _oldValue: String? = nil
    fileprivate var _newValue: String? = nil
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_MembershipChange: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GroupMembershipChanges: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GroupUpdated: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GroupUpdated.Inbox: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_GroupUpdated.MetadataFieldChange: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_MembershipChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MembershipChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "installation_ids"),
    2: .standard(proto: "account_address"),
    3: .standard(proto: "initiated_by_account_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.installationIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.initiatedByAccountAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.installationIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.installationIds, fieldNumber: 1)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 2)
    }
    if !self.initiatedByAccountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.initiatedByAccountAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MembershipChange, rhs: Xmtp_Mls_MessageContents_MembershipChange) -> Bool {
    if lhs.installationIds != rhs.installationIds {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.initiatedByAccountAddress != rhs.initiatedByAccountAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_GroupMembershipChanges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMembershipChanges"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "members_added"),
    2: .standard(proto: "members_removed"),
    3: .standard(proto: "installations_added"),
    4: .standard(proto: "installations_removed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.membersAdded) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.membersRemoved) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.installationsAdded) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.installationsRemoved) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.membersAdded.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.membersAdded, fieldNumber: 1)
    }
    if !self.membersRemoved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.membersRemoved, fieldNumber: 2)
    }
    if !self.installationsAdded.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.installationsAdded, fieldNumber: 3)
    }
    if !self.installationsRemoved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.installationsRemoved, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupMembershipChanges, rhs: Xmtp_Mls_MessageContents_GroupMembershipChanges) -> Bool {
    if lhs.membersAdded != rhs.membersAdded {return false}
    if lhs.membersRemoved != rhs.membersRemoved {return false}
    if lhs.installationsAdded != rhs.installationsAdded {return false}
    if lhs.installationsRemoved != rhs.installationsRemoved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_GroupUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupUpdated"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "initiated_by_inbox_id"),
    2: .standard(proto: "added_inboxes"),
    3: .standard(proto: "removed_inboxes"),
    4: .standard(proto: "metadata_field_changes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.initiatedByInboxID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.addedInboxes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.removedInboxes) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.metadataFieldChanges) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.initiatedByInboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.initiatedByInboxID, fieldNumber: 1)
    }
    if !self.addedInboxes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addedInboxes, fieldNumber: 2)
    }
    if !self.removedInboxes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.removedInboxes, fieldNumber: 3)
    }
    if !self.metadataFieldChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metadataFieldChanges, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupUpdated, rhs: Xmtp_Mls_MessageContents_GroupUpdated) -> Bool {
    if lhs.initiatedByInboxID != rhs.initiatedByInboxID {return false}
    if lhs.addedInboxes != rhs.addedInboxes {return false}
    if lhs.removedInboxes != rhs.removedInboxes {return false}
    if lhs.metadataFieldChanges != rhs.metadataFieldChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_GroupUpdated.Inbox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_GroupUpdated.protoMessageName + ".Inbox"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inbox_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.inboxID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupUpdated.Inbox, rhs: Xmtp_Mls_MessageContents_GroupUpdated.Inbox) -> Bool {
    if lhs.inboxID != rhs.inboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_GroupUpdated.MetadataFieldChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_GroupUpdated.protoMessageName + ".MetadataFieldChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name"),
    2: .standard(proto: "old_value"),
    3: .standard(proto: "new_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fieldName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._oldValue) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._newValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fieldName.isEmpty {
      try visitor.visitSingularStringField(value: self.fieldName, fieldNumber: 1)
    }
    try { if let v = self._oldValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._newValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupUpdated.MetadataFieldChange, rhs: Xmtp_Mls_MessageContents_GroupUpdated.MetadataFieldChange) -> Bool {
    if lhs.fieldName != rhs.fieldName {return false}
    if lhs._oldValue != rhs._oldValue {return false}
    if lhs._newValue != rhs._newValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
