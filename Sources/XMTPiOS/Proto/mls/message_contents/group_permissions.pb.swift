// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls/message_contents/group_permissions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Group mutable permissions metadata

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message for group mutable metadata
public struct Xmtp_Mls_MessageContents_GroupMutablePermissionsV1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var policies: Xmtp_Mls_MessageContents_PolicySet {
    get {return _policies ?? Xmtp_Mls_MessageContents_PolicySet()}
    set {_policies = newValue}
  }
  /// Returns true if `policies` has been explicitly set.
  public var hasPolicies: Bool {return self._policies != nil}
  /// Clears the value of `policies`. Subsequent reads from it will return its default value.
  public mutating func clearPolicies() {self._policies = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _policies: Xmtp_Mls_MessageContents_PolicySet? = nil
}

/// The set of policies that govern the group
public struct Xmtp_Mls_MessageContents_PolicySet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var addMemberPolicy: Xmtp_Mls_MessageContents_MembershipPolicy {
    get {return _addMemberPolicy ?? Xmtp_Mls_MessageContents_MembershipPolicy()}
    set {_addMemberPolicy = newValue}
  }
  /// Returns true if `addMemberPolicy` has been explicitly set.
  public var hasAddMemberPolicy: Bool {return self._addMemberPolicy != nil}
  /// Clears the value of `addMemberPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearAddMemberPolicy() {self._addMemberPolicy = nil}

  public var removeMemberPolicy: Xmtp_Mls_MessageContents_MembershipPolicy {
    get {return _removeMemberPolicy ?? Xmtp_Mls_MessageContents_MembershipPolicy()}
    set {_removeMemberPolicy = newValue}
  }
  /// Returns true if `removeMemberPolicy` has been explicitly set.
  public var hasRemoveMemberPolicy: Bool {return self._removeMemberPolicy != nil}
  /// Clears the value of `removeMemberPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearRemoveMemberPolicy() {self._removeMemberPolicy = nil}

  public var updateMetadataPolicy: Dictionary<String,Xmtp_Mls_MessageContents_MetadataPolicy> = [:]

  public var addAdminPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy {
    get {return _addAdminPolicy ?? Xmtp_Mls_MessageContents_PermissionsUpdatePolicy()}
    set {_addAdminPolicy = newValue}
  }
  /// Returns true if `addAdminPolicy` has been explicitly set.
  public var hasAddAdminPolicy: Bool {return self._addAdminPolicy != nil}
  /// Clears the value of `addAdminPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearAddAdminPolicy() {self._addAdminPolicy = nil}

  public var removeAdminPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy {
    get {return _removeAdminPolicy ?? Xmtp_Mls_MessageContents_PermissionsUpdatePolicy()}
    set {_removeAdminPolicy = newValue}
  }
  /// Returns true if `removeAdminPolicy` has been explicitly set.
  public var hasRemoveAdminPolicy: Bool {return self._removeAdminPolicy != nil}
  /// Clears the value of `removeAdminPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearRemoveAdminPolicy() {self._removeAdminPolicy = nil}

  public var updatePermissionsPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy {
    get {return _updatePermissionsPolicy ?? Xmtp_Mls_MessageContents_PermissionsUpdatePolicy()}
    set {_updatePermissionsPolicy = newValue}
  }
  /// Returns true if `updatePermissionsPolicy` has been explicitly set.
  public var hasUpdatePermissionsPolicy: Bool {return self._updatePermissionsPolicy != nil}
  /// Clears the value of `updatePermissionsPolicy`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatePermissionsPolicy() {self._updatePermissionsPolicy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _addMemberPolicy: Xmtp_Mls_MessageContents_MembershipPolicy? = nil
  fileprivate var _removeMemberPolicy: Xmtp_Mls_MessageContents_MembershipPolicy? = nil
  fileprivate var _addAdminPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy? = nil
  fileprivate var _removeAdminPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy? = nil
  fileprivate var _updatePermissionsPolicy: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy? = nil
}

/// A policy that governs adding/removing members or installations
public struct Xmtp_Mls_MessageContents_MembershipPolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var kind: Xmtp_Mls_MessageContents_MembershipPolicy.OneOf_Kind? = nil

  public var base: Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy {
    get {
      if case .base(let v)? = kind {return v}
      return .unspecified
    }
    set {kind = .base(newValue)}
  }

  public var andCondition: Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition {
    get {
      if case .andCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition()
    }
    set {kind = .andCondition(newValue)}
  }

  public var anyCondition: Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition {
    get {
      if case .anyCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition()
    }
    set {kind = .anyCondition(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case base(Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy)
    case andCondition(Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition)
    case anyCondition(Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_Mls_MessageContents_MembershipPolicy.OneOf_Kind, rhs: Xmtp_Mls_MessageContents_MembershipPolicy.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.base, .base): return {
        guard case .base(let l) = lhs, case .base(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.andCondition, .andCondition): return {
        guard case .andCondition(let l) = lhs, case .andCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.anyCondition, .anyCondition): return {
        guard case .anyCondition(let l) = lhs, case .anyCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Base policy
  public enum BasePolicy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case allow // = 1
    case deny // = 2
    case allowIfAdminOrSuperAdmin // = 3
    case allowIfSuperAdmin // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .allow
      case 2: self = .deny
      case 3: self = .allowIfAdminOrSuperAdmin
      case 4: self = .allowIfSuperAdmin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .allow: return 1
      case .deny: return 2
      case .allowIfAdminOrSuperAdmin: return 3
      case .allowIfSuperAdmin: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Combine multiple policies. All must evaluate to true
  public struct AndCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_MembershipPolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Combine multiple policies. Any must evaluate to true
  public struct AnyCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_MembershipPolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy] = [
    .unspecified,
    .allow,
    .deny,
    .allowIfAdminOrSuperAdmin,
    .allowIfSuperAdmin,
  ]
}

#endif  // swift(>=4.2)

/// A policy that governs updating metadata
public struct Xmtp_Mls_MessageContents_MetadataPolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var kind: Xmtp_Mls_MessageContents_MetadataPolicy.OneOf_Kind? = nil

  public var base: Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy {
    get {
      if case .base(let v)? = kind {return v}
      return .unspecified
    }
    set {kind = .base(newValue)}
  }

  public var andCondition: Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition {
    get {
      if case .andCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition()
    }
    set {kind = .andCondition(newValue)}
  }

  public var anyCondition: Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition {
    get {
      if case .anyCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition()
    }
    set {kind = .anyCondition(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case base(Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy)
    case andCondition(Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition)
    case anyCondition(Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_Mls_MessageContents_MetadataPolicy.OneOf_Kind, rhs: Xmtp_Mls_MessageContents_MetadataPolicy.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.base, .base): return {
        guard case .base(let l) = lhs, case .base(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.andCondition, .andCondition): return {
        guard case .andCondition(let l) = lhs, case .andCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.anyCondition, .anyCondition): return {
        guard case .anyCondition(let l) = lhs, case .anyCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Base policy
  public enum MetadataBasePolicy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case allow // = 1
    case deny // = 2
    case allowIfAdmin // = 3
    case allowIfSuperAdmin // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .allow
      case 2: self = .deny
      case 3: self = .allowIfAdmin
      case 4: self = .allowIfSuperAdmin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .allow: return 1
      case .deny: return 2
      case .allowIfAdmin: return 3
      case .allowIfSuperAdmin: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Combine multiple policies. All must evaluate to true
  public struct AndCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_MetadataPolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Combine multiple policies. Any must evaluate to true
  public struct AnyCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_MetadataPolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy] = [
    .unspecified,
    .allow,
    .deny,
    .allowIfAdmin,
    .allowIfSuperAdmin,
  ]
}

#endif  // swift(>=4.2)

/// A policy that governs updating permissions
public struct Xmtp_Mls_MessageContents_PermissionsUpdatePolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var kind: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.OneOf_Kind? = nil

  public var base: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy {
    get {
      if case .base(let v)? = kind {return v}
      return .unspecified
    }
    set {kind = .base(newValue)}
  }

  public var andCondition: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition {
    get {
      if case .andCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition()
    }
    set {kind = .andCondition(newValue)}
  }

  public var anyCondition: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition {
    get {
      if case .anyCondition(let v)? = kind {return v}
      return Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition()
    }
    set {kind = .anyCondition(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case base(Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy)
    case andCondition(Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition)
    case anyCondition(Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition)

  #if !swift(>=4.1)
    public static func ==(lhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.OneOf_Kind, rhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.base, .base): return {
        guard case .base(let l) = lhs, case .base(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.andCondition, .andCondition): return {
        guard case .andCondition(let l) = lhs, case .andCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.anyCondition, .anyCondition): return {
        guard case .anyCondition(let l) = lhs, case .anyCondition(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Base policy
  public enum PermissionsBasePolicy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case deny // = 1
    case allowIfAdmin // = 2
    case allowIfSuperAdmin // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .deny
      case 2: self = .allowIfAdmin
      case 3: self = .allowIfSuperAdmin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .deny: return 1
      case .allowIfAdmin: return 2
      case .allowIfSuperAdmin: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Combine multiple policies. All must evaluate to true
  public struct AndCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_PermissionsUpdatePolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Combine multiple policies. Any must evaluate to true
  public struct AnyCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var policies: [Xmtp_Mls_MessageContents_PermissionsUpdatePolicy] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy] = [
    .unspecified,
    .deny,
    .allowIfAdmin,
    .allowIfSuperAdmin,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_Mls_MessageContents_GroupMutablePermissionsV1: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PolicySet: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MembershipPolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MembershipPolicy.OneOf_Kind: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MetadataPolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MetadataPolicy.OneOf_Kind: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.OneOf_Kind: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition: @unchecked Sendable {}
extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls.message_contents"

extension Xmtp_Mls_MessageContents_GroupMutablePermissionsV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupMutablePermissionsV1"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._policies {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_GroupMutablePermissionsV1, rhs: Xmtp_Mls_MessageContents_GroupMutablePermissionsV1) -> Bool {
    if lhs._policies != rhs._policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PolicySet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PolicySet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "add_member_policy"),
    2: .standard(proto: "remove_member_policy"),
    3: .standard(proto: "update_metadata_policy"),
    4: .standard(proto: "add_admin_policy"),
    5: .standard(proto: "remove_admin_policy"),
    6: .standard(proto: "update_permissions_policy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._addMemberPolicy) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._removeMemberPolicy) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Xmtp_Mls_MessageContents_MetadataPolicy>.self, value: &self.updateMetadataPolicy) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._addAdminPolicy) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._removeAdminPolicy) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updatePermissionsPolicy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._addMemberPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._removeMemberPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.updateMetadataPolicy.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Xmtp_Mls_MessageContents_MetadataPolicy>.self, value: self.updateMetadataPolicy, fieldNumber: 3)
    }
    try { if let v = self._addAdminPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._removeAdminPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updatePermissionsPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PolicySet, rhs: Xmtp_Mls_MessageContents_PolicySet) -> Bool {
    if lhs._addMemberPolicy != rhs._addMemberPolicy {return false}
    if lhs._removeMemberPolicy != rhs._removeMemberPolicy {return false}
    if lhs.updateMetadataPolicy != rhs.updateMetadataPolicy {return false}
    if lhs._addAdminPolicy != rhs._addAdminPolicy {return false}
    if lhs._removeAdminPolicy != rhs._removeAdminPolicy {return false}
    if lhs._updatePermissionsPolicy != rhs._updatePermissionsPolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MembershipPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MembershipPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "and_condition"),
    3: .standard(proto: "any_condition"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .base(v)
        }
      }()
      case 2: try {
        var v: Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .andCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .andCondition(v)
        }
      }()
      case 3: try {
        var v: Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .anyCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .anyCondition(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .base?: try {
      guard case .base(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .andCondition?: try {
      guard case .andCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .anyCondition?: try {
      guard case .anyCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MembershipPolicy, rhs: Xmtp_Mls_MessageContents_MembershipPolicy) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MembershipPolicy.BasePolicy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BASE_POLICY_UNSPECIFIED"),
    1: .same(proto: "BASE_POLICY_ALLOW"),
    2: .same(proto: "BASE_POLICY_DENY"),
    3: .same(proto: "BASE_POLICY_ALLOW_IF_ADMIN_OR_SUPER_ADMIN"),
    4: .same(proto: "BASE_POLICY_ALLOW_IF_SUPER_ADMIN"),
  ]
}

extension Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_MembershipPolicy.protoMessageName + ".AndCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition, rhs: Xmtp_Mls_MessageContents_MembershipPolicy.AndCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_MembershipPolicy.protoMessageName + ".AnyCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition, rhs: Xmtp_Mls_MessageContents_MembershipPolicy.AnyCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MetadataPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetadataPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "and_condition"),
    3: .standard(proto: "any_condition"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .base(v)
        }
      }()
      case 2: try {
        var v: Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .andCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .andCondition(v)
        }
      }()
      case 3: try {
        var v: Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .anyCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .anyCondition(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .base?: try {
      guard case .base(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .andCondition?: try {
      guard case .andCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .anyCondition?: try {
      guard case .anyCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MetadataPolicy, rhs: Xmtp_Mls_MessageContents_MetadataPolicy) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MetadataPolicy.MetadataBasePolicy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METADATA_BASE_POLICY_UNSPECIFIED"),
    1: .same(proto: "METADATA_BASE_POLICY_ALLOW"),
    2: .same(proto: "METADATA_BASE_POLICY_DENY"),
    3: .same(proto: "METADATA_BASE_POLICY_ALLOW_IF_ADMIN"),
    4: .same(proto: "METADATA_BASE_POLICY_ALLOW_IF_SUPER_ADMIN"),
  ]
}

extension Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_MetadataPolicy.protoMessageName + ".AndCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition, rhs: Xmtp_Mls_MessageContents_MetadataPolicy.AndCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_MetadataPolicy.protoMessageName + ".AnyCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition, rhs: Xmtp_Mls_MessageContents_MetadataPolicy.AnyCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PermissionsUpdatePolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "and_condition"),
    3: .standard(proto: "any_condition"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .base(v)
        }
      }()
      case 2: try {
        var v: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .andCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .andCondition(v)
        }
      }()
      case 3: try {
        var v: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .anyCondition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .anyCondition(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .base?: try {
      guard case .base(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .andCondition?: try {
      guard case .andCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .anyCondition?: try {
      guard case .anyCondition(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy, rhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.PermissionsBasePolicy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERMISSIONS_BASE_POLICY_UNSPECIFIED"),
    1: .same(proto: "PERMISSIONS_BASE_POLICY_DENY"),
    2: .same(proto: "PERMISSIONS_BASE_POLICY_ALLOW_IF_ADMIN"),
    3: .same(proto: "PERMISSIONS_BASE_POLICY_ALLOW_IF_SUPER_ADMIN"),
  ]
}

extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.protoMessageName + ".AndCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition, rhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AndCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.protoMessageName + ".AnyCondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.policies) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.policies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition, rhs: Xmtp_Mls_MessageContents_PermissionsUpdatePolicy.AnyCondition) -> Bool {
    if lhs.policies != rhs.policies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
