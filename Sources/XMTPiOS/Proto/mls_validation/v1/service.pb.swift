// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mls_validation/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Message API

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Validates a Inbox-ID Key Package Type
public struct Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.Response] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// one response corresponding to information about one key package
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var credential: Xmtp_Identity_MlsCredential {
      get {return _credential ?? Xmtp_Identity_MlsCredential()}
      set {_credential = newValue}
    }
    /// Returns true if `credential` has been explicitly set.
    public var hasCredential: Bool {return self._credential != nil}
    /// Clears the value of `credential`. Subsequent reads from it will return its default value.
    public mutating func clearCredential() {self._credential = nil}

    public var installationPublicKey: Data = Data()

    public var expiration: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _credential: Xmtp_Identity_MlsCredential? = nil
  }

  public init() {}
}

/// Contains a batch of serialized Key Packages
public struct Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyPackages: [Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Wrapper for each key package
  public struct KeyPackage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var keyPackageBytesTlsSerialized: Data = Data()

    public var isInboxIDCredential: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Response to ValidateKeyPackagesRequest
public struct Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An individual response to one key package
  public struct ValidationResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var installationID: Data = Data()

    public var accountAddress: String = String()

    public var credentialIdentityBytes: Data = Data()

    public var expiration: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Contains a batch of serialized Group Messages
public struct Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupMessages: [Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Wrapper for each message
  public struct GroupMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var groupMessageBytesTlsSerialized: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Response to ValidateGroupMessagesRequest
public struct Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responses: [Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An individual response to one message
  public struct ValidationResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var groupID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Request to get a final association state for identity updates
public struct Xmtp_MlsValidation_V1_GetAssociationStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of identity updates
  public var oldUpdates: [Xmtp_Identity_Associations_IdentityUpdate] = []

  public var newUpdates: [Xmtp_Identity_Associations_IdentityUpdate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response to GetAssociationStateRequest, containing the final association state
/// for an InboxID
public struct Xmtp_MlsValidation_V1_GetAssociationStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var associationState: Xmtp_Identity_Associations_AssociationState {
    get {return _associationState ?? Xmtp_Identity_Associations_AssociationState()}
    set {_associationState = newValue}
  }
  /// Returns true if `associationState` has been explicitly set.
  public var hasAssociationState: Bool {return self._associationState != nil}
  /// Clears the value of `associationState`. Subsequent reads from it will return its default value.
  public mutating func clearAssociationState() {self._associationState = nil}

  public var stateDiff: Xmtp_Identity_Associations_AssociationStateDiff {
    get {return _stateDiff ?? Xmtp_Identity_Associations_AssociationStateDiff()}
    set {_stateDiff = newValue}
  }
  /// Returns true if `stateDiff` has been explicitly set.
  public var hasStateDiff: Bool {return self._stateDiff != nil}
  /// Clears the value of `stateDiff`. Subsequent reads from it will return its default value.
  public mutating func clearStateDiff() {self._stateDiff = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _associationState: Xmtp_Identity_Associations_AssociationState? = nil
  fileprivate var _stateDiff: Xmtp_Identity_Associations_AssociationStateDiff? = nil
}

/// Request to validate an InboxID with the backend service. Ensures an Inbox Id <> Installation key are valid.
public struct Xmtp_MlsValidation_V1_ValidateInboxIdsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of validation requests
  public var requests: [Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.ValidationRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// a single validation request
  public struct ValidationRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var credential: Xmtp_Identity_MlsCredential {
      get {return _credential ?? Xmtp_Identity_MlsCredential()}
      set {_credential = newValue}
    }
    /// Returns true if `credential` has been explicitly set.
    public var hasCredential: Bool {return self._credential != nil}
    /// Clears the value of `credential`. Subsequent reads from it will return its default value.
    public mutating func clearCredential() {self._credential = nil}

    public var installationPublicKey: Data = Data()

    public var identityUpdates: [Xmtp_Identity_Associations_IdentityUpdate] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _credential: Xmtp_Identity_MlsCredential? = nil
  }

  public init() {}
}

/// Response to ValidateInboxIdRequest
public struct Xmtp_MlsValidation_V1_ValidateInboxIdsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of validation responses
  public var responses: [Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.ValidationResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// a single validation response
  public struct ValidationResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var isOk: Bool = false

    public var errorMessage: String = String()

    public var inboxID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.Response: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_GetAssociationStateRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_GetAssociationStateResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateInboxIdsRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.ValidationRequest: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateInboxIdsResponse: @unchecked Sendable {}
extension Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.ValidationResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.mls_validation.v1"

extension Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateInboxIdKeyPackagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .same(proto: "credential"),
    4: .standard(proto: "installation_public_key"),
    5: .same(proto: "expiration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._credential) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.installationPublicKey) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.expiration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    try { if let v = self._credential {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.installationPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.installationPublicKey, fieldNumber: 4)
    }
    if self.expiration != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiration, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.Response, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdKeyPackagesResponse.Response) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs._credential != rhs._credential {return false}
    if lhs.installationPublicKey != rhs.installationPublicKey {return false}
    if lhs.expiration != rhs.expiration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateKeyPackagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_packages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.keyPackages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPackages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyPackages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest) -> Bool {
    if lhs.keyPackages != rhs.keyPackages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.protoMessageName + ".KeyPackage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_package_bytes_tls_serialized"),
    2: .standard(proto: "is_inbox_id_credential"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.keyPackageBytesTlsSerialized) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isInboxIDCredential) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPackageBytesTlsSerialized.isEmpty {
      try visitor.visitSingularBytesField(value: self.keyPackageBytesTlsSerialized, fieldNumber: 1)
    }
    if self.isInboxIDCredential != false {
      try visitor.visitSingularBoolField(value: self.isInboxIDCredential, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesRequest.KeyPackage) -> Bool {
    if lhs.keyPackageBytesTlsSerialized != rhs.keyPackageBytesTlsSerialized {return false}
    if lhs.isInboxIDCredential != rhs.isInboxIDCredential {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateKeyPackagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.protoMessageName + ".ValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "installation_id"),
    4: .standard(proto: "account_address"),
    5: .standard(proto: "credential_identity_bytes"),
    6: .same(proto: "expiration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.installationID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.credentialIdentityBytes) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.expiration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.installationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.installationID, fieldNumber: 3)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 4)
    }
    if !self.credentialIdentityBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.credentialIdentityBytes, fieldNumber: 5)
    }
    if self.expiration != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiration, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse, rhs: Xmtp_MlsValidation_V1_ValidateKeyPackagesResponse.ValidationResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.installationID != rhs.installationID {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.credentialIdentityBytes != rhs.credentialIdentityBytes {return false}
    if lhs.expiration != rhs.expiration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateGroupMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_messages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groupMessages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupMessages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupMessages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest) -> Bool {
    if lhs.groupMessages != rhs.groupMessages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.protoMessageName + ".GroupMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_message_bytes_tls_serialized"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupMessageBytesTlsSerialized) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupMessageBytesTlsSerialized.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupMessageBytesTlsSerialized, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesRequest.GroupMessage) -> Bool {
    if lhs.groupMessageBytesTlsSerialized != rhs.groupMessageBytesTlsSerialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateGroupMessagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.protoMessageName + ".ValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse, rhs: Xmtp_MlsValidation_V1_ValidateGroupMessagesResponse.ValidationResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_GetAssociationStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssociationStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "old_updates"),
    2: .standard(proto: "new_updates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.oldUpdates) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.newUpdates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.oldUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldUpdates, fieldNumber: 1)
    }
    if !self.newUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newUpdates, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_GetAssociationStateRequest, rhs: Xmtp_MlsValidation_V1_GetAssociationStateRequest) -> Bool {
    if lhs.oldUpdates != rhs.oldUpdates {return false}
    if lhs.newUpdates != rhs.newUpdates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_GetAssociationStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAssociationStateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "association_state"),
    2: .standard(proto: "state_diff"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._associationState) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stateDiff) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._associationState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._stateDiff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_GetAssociationStateResponse, rhs: Xmtp_MlsValidation_V1_GetAssociationStateResponse) -> Bool {
    if lhs._associationState != rhs._associationState {return false}
    if lhs._stateDiff != rhs._stateDiff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateInboxIdsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateInboxIdsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.requests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdsRequest, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdsRequest) -> Bool {
    if lhs.requests != rhs.requests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.ValidationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.protoMessageName + ".ValidationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credential"),
    2: .standard(proto: "installation_public_key"),
    3: .standard(proto: "identity_updates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._credential) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.installationPublicKey) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.identityUpdates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._credential {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.installationPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.installationPublicKey, fieldNumber: 2)
    }
    if !self.identityUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identityUpdates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.ValidationRequest, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdsRequest.ValidationRequest) -> Bool {
    if lhs._credential != rhs._credential {return false}
    if lhs.installationPublicKey != rhs.installationPublicKey {return false}
    if lhs.identityUpdates != rhs.identityUpdates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateInboxIdsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateInboxIdsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdsResponse, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdsResponse) -> Bool {
    if lhs.responses != rhs.responses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.ValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.protoMessageName + ".ValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "inbox_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.inboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.inboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.inboxID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.ValidationResponse, rhs: Xmtp_MlsValidation_V1_ValidateInboxIdsResponse.ValidationResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.inboxID != rhs.inboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
