// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message_contents/frames.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Signature is a generic structure for public key signatures.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The message that will be signed by the Client and returned inside the
/// `action_body` field of the FrameAction message
public struct Xmtp_MessageContents_FrameActionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The URL of the frame that was clicked
  /// May be different from `post_url`
  public var frameURL: String = String()

  /// The 1-indexed button that was clicked
  public var buttonIndex: Int32 = 0

  /// Timestamp of the click in milliseconds since the epoch
  public var timestamp: UInt64 = 0

  /// A unique identifier for the conversation, not tied to anything on the
  /// network. Will not match the topic or conversation_id
  public var opaqueConversationIdentifier: String = String()

  /// Unix timestamp
  public var unixTimestamp: UInt32 = 0

  /// Input text from a text input field
  public var inputText: String = String()

  /// A state serialized to a string (for example via JSON.stringify()). Maximum 4096 bytes.
  public var state: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The outer payload that will be sent as the `messageBytes` in the
/// `trusted_data` part of the Frames message
public struct Xmtp_MessageContents_FrameAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var signature: Xmtp_MessageContents_Signature {
    get {return _signature ?? Xmtp_MessageContents_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  /// The SignedPublicKeyBundle of the signer, used to link the XMTP signature
  /// with a blockchain account through a chain of signatures.
  public var signedPublicKeyBundle: Xmtp_MessageContents_SignedPublicKeyBundle {
    get {return _signedPublicKeyBundle ?? Xmtp_MessageContents_SignedPublicKeyBundle()}
    set {_signedPublicKeyBundle = newValue}
  }
  /// Returns true if `signedPublicKeyBundle` has been explicitly set.
  public var hasSignedPublicKeyBundle: Bool {return self._signedPublicKeyBundle != nil}
  /// Clears the value of `signedPublicKeyBundle`. Subsequent reads from it will return its default value.
  public mutating func clearSignedPublicKeyBundle() {self._signedPublicKeyBundle = nil}

  /// Serialized FrameActionBody message, so that the signature verification can
  /// happen on a byte-perfect representation of the message
  public var actionBody: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signature: Xmtp_MessageContents_Signature? = nil
  fileprivate var _signedPublicKeyBundle: Xmtp_MessageContents_SignedPublicKeyBundle? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Xmtp_MessageContents_FrameActionBody: @unchecked Sendable {}
extension Xmtp_MessageContents_FrameAction: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xmtp.message_contents"

extension Xmtp_MessageContents_FrameActionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrameActionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frame_url"),
    2: .standard(proto: "button_index"),
    3: .same(proto: "timestamp"),
    4: .standard(proto: "opaque_conversation_identifier"),
    5: .standard(proto: "unix_timestamp"),
    6: .standard(proto: "input_text"),
    7: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.frameURL) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.buttonIndex) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.opaqueConversationIdentifier) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.unixTimestamp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.inputText) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.frameURL.isEmpty {
      try visitor.visitSingularStringField(value: self.frameURL, fieldNumber: 1)
    }
    if self.buttonIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.buttonIndex, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if !self.opaqueConversationIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.opaqueConversationIdentifier, fieldNumber: 4)
    }
    if self.unixTimestamp != 0 {
      try visitor.visitSingularUInt32Field(value: self.unixTimestamp, fieldNumber: 5)
    }
    if !self.inputText.isEmpty {
      try visitor.visitSingularStringField(value: self.inputText, fieldNumber: 6)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MessageContents_FrameActionBody, rhs: Xmtp_MessageContents_FrameActionBody) -> Bool {
    if lhs.frameURL != rhs.frameURL {return false}
    if lhs.buttonIndex != rhs.buttonIndex {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.opaqueConversationIdentifier != rhs.opaqueConversationIdentifier {return false}
    if lhs.unixTimestamp != rhs.unixTimestamp {return false}
    if lhs.inputText != rhs.inputText {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Xmtp_MessageContents_FrameAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrameAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .standard(proto: "signed_public_key_bundle"),
    3: .standard(proto: "action_body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signedPublicKeyBundle) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.actionBody) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signedPublicKeyBundle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.actionBody.isEmpty {
      try visitor.visitSingularBytesField(value: self.actionBody, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Xmtp_MessageContents_FrameAction, rhs: Xmtp_MessageContents_FrameAction) -> Bool {
    if lhs._signature != rhs._signature {return false}
    if lhs._signedPublicKeyBundle != rhs._signedPublicKeyBundle {return false}
    if lhs.actionBody != rhs.actionBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
