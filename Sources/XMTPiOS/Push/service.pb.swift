// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: notifications/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An union of possible delibery mechanisms
public struct Notifications_V1_DeliveryMechanism {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deliveryMechanismType: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType? = nil

  public var apnsDeviceToken: String {
	get {
	  if case .apnsDeviceToken(let v)? = deliveryMechanismType {return v}
	  return String()
	}
	set {deliveryMechanismType = .apnsDeviceToken(newValue)}
  }

  public var firebaseDeviceToken: String {
	get {
	  if case .firebaseDeviceToken(let v)? = deliveryMechanismType {return v}
	  return String()
	}
	set {deliveryMechanismType = .firebaseDeviceToken(newValue)}
  }

  public var customToken: String {
	get {
	  if case .customToken(let v)? = deliveryMechanismType {return v}
	  return String()
	}
	set {deliveryMechanismType = .customToken(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_DeliveryMechanismType: Equatable {
	case apnsDeviceToken(String)
	case firebaseDeviceToken(String)
	case customToken(String)

  #if !swift(>=4.1)
	public static func ==(lhs: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType, rhs: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType) -> Bool {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch (lhs, rhs) {
	  case (.apnsDeviceToken, .apnsDeviceToken): return {
		guard case .apnsDeviceToken(let l) = lhs, case .apnsDeviceToken(let r) = rhs else { preconditionFailure() }
		return l == r
	  }()
	  case (.firebaseDeviceToken, .firebaseDeviceToken): return {
		guard case .firebaseDeviceToken(let l) = lhs, case .firebaseDeviceToken(let r) = rhs else { preconditionFailure() }
		return l == r
	  }()
	  case (.customToken, .customToken): return {
		guard case .customToken(let l) = lhs, case .customToken(let r) = rhs else { preconditionFailure() }
		return l == r
	  }()
	  default: return false
	  }
	}
  #endif
  }

  public init() {}
}

/// A request to register an installation with the service
public struct Notifications_V1_RegisterInstallationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var deliveryMechanism: Notifications_V1_DeliveryMechanism {
	get {return _deliveryMechanism ?? Notifications_V1_DeliveryMechanism()}
	set {_deliveryMechanism = newValue}
  }
  /// Returns true if `deliveryMechanism` has been explicitly set.
  public var hasDeliveryMechanism: Bool {return self._deliveryMechanism != nil}
  /// Clears the value of `deliveryMechanism`. Subsequent reads from it will return its default value.
  public mutating func clearDeliveryMechanism() {self._deliveryMechanism = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _deliveryMechanism: Notifications_V1_DeliveryMechanism? = nil
}

/// Response to RegisterInstallationRequest
public struct Notifications_V1_RegisterInstallationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var validUntil: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Delete an installation from the service
public struct Notifications_V1_DeleteInstallationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A subscription with associated metadata
public struct Notifications_V1_Subscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var topic: String = String()

  public var hmacKeys: [Notifications_V1_Subscription.HmacKey] = []

  public var isSilent: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct HmacKey {
	// SwiftProtobuf.Message conformance is added in an extension below. See the
	// `Message` and `Message+*Additions` files in the SwiftProtobuf library for
	// methods supported on all messages.

	public var thirtyDayPeriodsSinceEpoch: UInt32 = 0

	public var key: Data = Data()

	public var unknownFields = SwiftProtobuf.UnknownStorage()

	public init() {}
  }

  public init() {}
}

/// A request to subscribe to a list of topics and update the associated metadata
public struct Notifications_V1_SubscribeWithMetadataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var subscriptions: [Notifications_V1_Subscription] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Subscribe to a list of topics
public struct Notifications_V1_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var topics: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Unsubscribe from a list of topics
public struct Notifications_V1_UnsubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var installationID: String = String()

  public var topics: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Notifications_V1_DeliveryMechanism: @unchecked Sendable {}
extension Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType: @unchecked Sendable {}
extension Notifications_V1_RegisterInstallationRequest: @unchecked Sendable {}
extension Notifications_V1_RegisterInstallationResponse: @unchecked Sendable {}
extension Notifications_V1_DeleteInstallationRequest: @unchecked Sendable {}
extension Notifications_V1_Subscription: @unchecked Sendable {}
extension Notifications_V1_Subscription.HmacKey: @unchecked Sendable {}
extension Notifications_V1_SubscribeWithMetadataRequest: @unchecked Sendable {}
extension Notifications_V1_SubscribeRequest: @unchecked Sendable {}
extension Notifications_V1_UnsubscribeRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "notifications.v1"

extension Notifications_V1_DeliveryMechanism: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeliveryMechanism"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "apns_device_token"),
	2: .standard(proto: "firebase_device_token"),
	3: .standard(proto: "custom_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try {
		var v: String?
		try decoder.decodeSingularStringField(value: &v)
		if let v = v {
		  if self.deliveryMechanismType != nil {try decoder.handleConflictingOneOf()}
		  self.deliveryMechanismType = .apnsDeviceToken(v)
		}
	  }()
	  case 2: try {
		var v: String?
		try decoder.decodeSingularStringField(value: &v)
		if let v = v {
		  if self.deliveryMechanismType != nil {try decoder.handleConflictingOneOf()}
		  self.deliveryMechanismType = .firebaseDeviceToken(v)
		}
	  }()
	  case 3: try {
		var v: String?
		try decoder.decodeSingularStringField(value: &v)
		if let v = v {
		  if self.deliveryMechanismType != nil {try decoder.handleConflictingOneOf()}
		  self.deliveryMechanismType = .customToken(v)
		}
	  }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	// The use of inline closures is to circumvent an issue where the compiler
	// allocates stack space for every if/case branch local when no optimizations
	// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
	// https://github.com/apple/swift-protobuf/issues/1182
	switch self.deliveryMechanismType {
	case .apnsDeviceToken?: try {
	  guard case .apnsDeviceToken(let v)? = self.deliveryMechanismType else { preconditionFailure() }
	  try visitor.visitSingularStringField(value: v, fieldNumber: 1)
	}()
	case .firebaseDeviceToken?: try {
	  guard case .firebaseDeviceToken(let v)? = self.deliveryMechanismType else { preconditionFailure() }
	  try visitor.visitSingularStringField(value: v, fieldNumber: 2)
	}()
	case .customToken?: try {
	  guard case .customToken(let v)? = self.deliveryMechanismType else { preconditionFailure() }
	  try visitor.visitSingularStringField(value: v, fieldNumber: 3)
	}()
	case nil: break
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_DeliveryMechanism, rhs: Notifications_V1_DeliveryMechanism) -> Bool {
	if lhs.deliveryMechanismType != rhs.deliveryMechanismType {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_RegisterInstallationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterInstallationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
	2: .standard(proto: "delivery_mechanism"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  case 2: try { try decoder.decodeSingularMessageField(value: &self._deliveryMechanism) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	// The use of inline closures is to circumvent an issue where the compiler
	// allocates stack space for every if/case branch local when no optimizations
	// are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
	// https://github.com/apple/swift-protobuf/issues/1182
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	try { if let v = self._deliveryMechanism {
	  try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
	} }()
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_RegisterInstallationRequest, rhs: Notifications_V1_RegisterInstallationRequest) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs._deliveryMechanism != rhs._deliveryMechanism {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_RegisterInstallationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterInstallationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
	2: .standard(proto: "valid_until"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  case 2: try { try decoder.decodeSingularUInt64Field(value: &self.validUntil) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	if self.validUntil != 0 {
	  try visitor.visitSingularUInt64Field(value: self.validUntil, fieldNumber: 2)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_RegisterInstallationResponse, rhs: Notifications_V1_RegisterInstallationResponse) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs.validUntil != rhs.validUntil {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_DeleteInstallationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteInstallationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_DeleteInstallationRequest, rhs: Notifications_V1_DeleteInstallationRequest) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Subscription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .same(proto: "topic"),
	2: .standard(proto: "hmac_keys"),
	3: .standard(proto: "is_silent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.topic) }()
	  case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hmacKeys) }()
	  case 3: try { try decoder.decodeSingularBoolField(value: &self.isSilent) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.topic.isEmpty {
	  try visitor.visitSingularStringField(value: self.topic, fieldNumber: 1)
	}
	if !self.hmacKeys.isEmpty {
	  try visitor.visitRepeatedMessageField(value: self.hmacKeys, fieldNumber: 2)
	}
	if self.isSilent != false {
	  try visitor.visitSingularBoolField(value: self.isSilent, fieldNumber: 3)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_Subscription, rhs: Notifications_V1_Subscription) -> Bool {
	if lhs.topic != rhs.topic {return false}
	if lhs.hmacKeys != rhs.hmacKeys {return false}
	if lhs.isSilent != rhs.isSilent {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_Subscription.HmacKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Notifications_V1_Subscription.protoMessageName + ".HmacKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "thirty_day_periods_since_epoch"),
	2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularUInt32Field(value: &self.thirtyDayPeriodsSinceEpoch) }()
	  case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if self.thirtyDayPeriodsSinceEpoch != 0 {
	  try visitor.visitSingularUInt32Field(value: self.thirtyDayPeriodsSinceEpoch, fieldNumber: 1)
	}
	if !self.key.isEmpty {
	  try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_Subscription.HmacKey, rhs: Notifications_V1_Subscription.HmacKey) -> Bool {
	if lhs.thirtyDayPeriodsSinceEpoch != rhs.thirtyDayPeriodsSinceEpoch {return false}
	if lhs.key != rhs.key {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_SubscribeWithMetadataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeWithMetadataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
	2: .same(proto: "subscriptions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  case 2: try { try decoder.decodeRepeatedMessageField(value: &self.subscriptions) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	if !self.subscriptions.isEmpty {
	  try visitor.visitRepeatedMessageField(value: self.subscriptions, fieldNumber: 2)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_SubscribeWithMetadataRequest, rhs: Notifications_V1_SubscribeWithMetadataRequest) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs.subscriptions != rhs.subscriptions {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
	2: .same(proto: "topics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  case 2: try { try decoder.decodeRepeatedStringField(value: &self.topics) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	if !self.topics.isEmpty {
	  try visitor.visitRepeatedStringField(value: self.topics, fieldNumber: 2)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_SubscribeRequest, rhs: Notifications_V1_SubscribeRequest) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs.topics != rhs.topics {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}

extension Notifications_V1_UnsubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnsubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
	1: .standard(proto: "installation_id"),
	2: .same(proto: "topics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
	while let fieldNumber = try decoder.nextFieldNumber() {
	  // The use of inline closures is to circumvent an issue where the compiler
	  // allocates stack space for every case branch when no optimizations are
	  // enabled. https://github.com/apple/swift-protobuf/issues/1034
	  switch fieldNumber {
	  case 1: try { try decoder.decodeSingularStringField(value: &self.installationID) }()
	  case 2: try { try decoder.decodeRepeatedStringField(value: &self.topics) }()
	  default: break
	  }
	}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
	if !self.installationID.isEmpty {
	  try visitor.visitSingularStringField(value: self.installationID, fieldNumber: 1)
	}
	if !self.topics.isEmpty {
	  try visitor.visitRepeatedStringField(value: self.topics, fieldNumber: 2)
	}
	try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Notifications_V1_UnsubscribeRequest, rhs: Notifications_V1_UnsubscribeRequest) -> Bool {
	if lhs.installationID != rhs.installationID {return false}
	if lhs.topics != rhs.topics {return false}
	if lhs.unknownFields != rhs.unknownFields {return false}
	return true
  }
}
